3362. Zero Array Transformation III
________________________________________________________

class Solution {
    public int maxRemoval(int[] A, int[][] queries) {
        int n = A.length, nq = queries.length;
        Arrays.sort(queries, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> h = new PriorityQueue<>(); // min heap
        int[] end = new int[n + 1];
        int cur = 0, j = 0;
        for (int i = 0; i < n; ++i) {
            cur -= end[i];
            while (j < nq && queries[j][0] <= i) {
                h.offer(-queries[j][1]); // Add negative for min-heap
                j++;
            }
            while (cur < A[i]) {
                if (h.isEmpty() || -h.peek() < i) {
                    return -1;
                }
                end[-h.poll() + 1]++;
                cur++;
            }
        }
        return h.size();
    }
}
________________________________________________________




Problem Statement :
You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri].

Each queries[i] represents the following action on nums:

Decrement the value at each index in the range [li, ri] in nums by at most 1.
The amount by which the value is decremented can be chosen independently for each index.
A Zero Array is an array with all its elements equal to 0.

Return the maximum number of elements that can be removed from queries, such that nums can still be converted to a zero array using the remaining queries. If it is not possible to convert nums to a zero array, return -1.





Approach : 
h are ending indices of available queries
cur are number of queries currently in use.

Iterate each A[i],
popping out all ended query,
update availble queries in h.

While valid queries cur is smaller than required A[i],
we need to take a query from h and add to cur.
the stradgy is popping out the query with biggest ending index.

Repeat this process and return the number of unused queries.




Complexity : 
Time Complexity : O(n + qlogq)
Space Complexity : O(q)