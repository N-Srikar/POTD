790. Domino and Tromino Tiling
________________________________________________________

class Solution {
    public int numTilings(int n) {
        int MOD = 1_000_000_007;
        if (n == 1) return 1;
        if (n == 2) return 2;
        if (n == 3) return 5;

        long[] dp = new long[n + 1];
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        dp[3] = 5;

        for (int i = 4; i <= n; i++) {
            dp[i] = (2 * dp[i - 1] % MOD + dp[i - 3] % MOD) % MOD;
        }

        return (int) dp[n];
    }
}

________________________________________________________


Problem Statement :
You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.

Given an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 10^9 + 7.

In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.





Approach :
Let dp[i] = number of ways to tile a 2 x i board.

We analyze how to reach length i:
Using a vertical domino on i-1: contributes dp[i - 1].
Using 2 horizontal dominoes on i-2: contributes dp[i - 2].
Using tromino tiles: for each i >= 3, we can place a tromino and then complete the rest.

Tromino tiles contribute from both sides (L-shapes opening left or right), hence:
Total tromino contribution to dp[i] = 2 * dp[i - 3]

So, the recurrence becomes:
dp[i] = dp[i-1] + dp[i-2] + 2*dp[i-3]

But from i >= 4, additional overlapping cases (trominos + domino combo) are involved, so we generalize further:

The correct recurrence is:
dp[i] = 2 * dp[i - 1] + dp[i - 3]





Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)