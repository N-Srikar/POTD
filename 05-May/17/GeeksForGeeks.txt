Sort the given array after applying the given equation
________________________________________________________

class Solution {
    public ArrayList<Integer> sortArray(int[] arr, int A, int B, int C) {
        int n = arr.length;
        ArrayList<Integer> res = new ArrayList<>(n);
        for (int i = 0; i < n; i++) res.add(0); 

        int left = 0, right = n - 1;
        int index = (A >= 0) ? n - 1 : 0;

        while (left <= right) {
            int leftVal = compute(arr[left], A, B, C);
            int rightVal = compute(arr[right], A, B, C);

            if (A >= 0) {
                if (leftVal > rightVal) {
                    res.set(index--, leftVal);
                    left++;
                } else {
                    res.set(index--, rightVal);
                    right--;
                }
            } else {
                if (leftVal < rightVal) {
                    res.set(index++, leftVal);
                    left++;
                } else {
                    res.set(index++, rightVal);
                    right--;
                }
            }
        }

        return res;
    }

    private int compute(int x, int A, int B, int C) {
        return A * x * x + B * x + C;
    }
}
________________________________________________________



Problem Statement :
Given an integer array arr[] sorted in ascending order, along with three integers: A, B, and C. The task is to transform each element x in the array using the quadratic function A*(x2) + B*x + C. After applying this transformation to every element, return the modified array in sorted order.





Approach :
Define the function f(x) = A·x² + B·x + C.

The function behaves as:
If A > 0, the parabola opens upward, and values at ends are larger, so we fill result from end to start.
If A < 0, the parabola opens downward, and values at ends are smaller, so we fill result from start to end.

If A == 0, the function becomes linear:
If B >= 0, values increase → go left to right.
If B < 0, values decrease → go right to left.

Use two pointers (i = 0, j = n - 1) and compare f(arr[i]) and f(arr[j]) based on above direction.

Place the appropriate value in result array accordingly and move pointers.

Return the result list.






Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)