75. Sort Colors
_______________________________________________________

class Solution {
    public void sortColors(int[] nums) {
        int i = 0, j = nums.length - 1, x = 0;
        while (x<=j) {
            if (nums[x] == 0) {
                nums[x] = nums[i];
                nums[i] = 0;
                i++; x++;
            }
            else if (nums[x] == 2) {
                nums[x] = nums[j];
                nums[j] = 2;
                j--;
            }
            else x++;
        }
    }
}
_______________________________________________________




Problem Statement :
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 


Approach :
Dutch National Flag Algorithm

We use three pointers:
i: Points to the next position where 0 should go
j: Points to the next position where 2 should go
x: Current index we're scanning

Steps:
Initialize:
i = 0, j = n - 1, x = 0

While x <= j:
If nums[x] == 0:
Swap with nums[i], increment i and x

If nums[x] == 2:
Swap with nums[j], decrement j. Do not increment x because the swapped element needs to be processed

If nums[x] == 1:
Just increment x

This ensures the elements are sorted in a single pass.




Complexity :
Time Complexity : O(n)
Space Complexity : O(1)