Look and Say Pattern
________________________________________________________

class Solution {
    public String countAndSay(int n) {
        if (n == 1) return "1";

        String current = "1";

        for (int i = 2; i <= n; i++) {
            StringBuilder next = new StringBuilder();
            int count = 1;
            char digit = current.charAt(0);

            for (int j = 1; j < current.length(); j++) {
                if (current.charAt(j) == digit) {
                    count++;
                } else {
                    next.append(count).append(digit);
                    digit = current.charAt(j);
                    count = 1;
                }
            }

            // Append the last group
            next.append(count).append(digit);
            current = next.toString();
        }

        return current;
    }
}

________________________________________________________



Problem Statement :
Given an integer n. Return the nth row of the following look-and-say pattern.
1
11
21
1211
111221

Look-and-Say Pattern:

To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example:

1 is read off as "one 1" or 11.
11 is read off as "two 1s" or 21.
21 is read off as "one 2, then one 1" or 1211.
1211 is read off as "one 1, one 2, then two 1s" or 111221.
111221 is read off as "three 1s, two 2s, then one 1" or 312211.









Approach :
Base Case:
If n == 1, return "1".

Iterate to Build Each Term:
Start from "1".

For each term from 2 to n, do the following:
Read the current term digit by digit.
Count consecutive identical digits.
Construct the next term by appending count + digit.

String Building:
Use a StringBuilder for efficient string concatenation.






Complexity : 
Time Complexity : O(2^n)
Space Complexity : O(2^n)