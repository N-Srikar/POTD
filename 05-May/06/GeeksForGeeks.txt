Left View of Binary Tree
________________________________________________________

class Solution {
    ArrayList<Integer> leftView(Node root) {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) return result;
        
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                Node curr = q.poll();
                if (i == 0) result.add(curr.data);
                if (curr.left != null) q.add(curr.left);
                if (curr.right != null) q.add(curr.right);
            }
        }
        
        return result;
    }
}
________________________________________________________


Problem Statement : 
You are given the root of a binary tree. Your task is to return the left view of the binary tree. The left view of a binary tree is the set of nodes visible when the tree is viewed from the left side.

If the tree is empty, return an empty list.




Approach : 
If the tree is empty (root == null), return an empty list.
Use a queue to perform a level-order (BFS) traversal.
For each level:
Record the first node (i.e., the leftmost node of that level).
Add its left and right children (if present) to the queue.
Repeat until all levels are processed.



Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)