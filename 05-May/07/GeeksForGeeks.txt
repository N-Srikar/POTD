Root to Leaf Paths
_______________________________________________________

class Solution {
    public static ArrayList<ArrayList<Integer>> Paths(Node root) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        ArrayList<Integer> path = new ArrayList<>();
        dfs(root, path, result);
        return result;
    }

    private static void dfs(Node node, ArrayList<Integer> path, ArrayList<ArrayList<Integer>> result) {
        if (node == null) return;

        path.add(node.data);
        
        if (node.left == null && node.right == null) {
            result.add(new ArrayList<>(path));
        } else {
            dfs(node.left, path, result);
            dfs(node.right, path, result);
        }

        path.remove(path.size() - 1);
    }
}

_______________________________________________________


Problem Statement : 
Given a Binary Tree, you need to find all the possible paths from the root node to all the leaf nodes of the binary tree.

Note: The paths should be returned such that paths from the left subtree of any node are listed first, followed by paths from the right subtree.


Approach : 
Initialize a result list to hold all paths.

Use a recursive helper function that:
Adds the current node to a temporary list representing the path.
If the current node is a leaf node, add the current path to the result.
Recursively explore the left and right child.
Backtrack by removing the last added node to explore new paths.

Return the paths



Complexity : 
Time Complexity : O(n)
Space Complexity : O(h)