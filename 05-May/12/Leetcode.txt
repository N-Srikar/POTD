2094. Finding 3-Digit Even Numbers
_________________________________________________________

class Solution {
    public int[] findEvenNumbers(int[] digits) {
        int[] freq = new int[10];
        for (int digit : digits)
            freq[digit]++;
        List<Integer> list = new ArrayList<>();
        for (int i = 1; i <= 9; i++){
            if (freq[i] == 0)
                continue;
            freq[i]--;
            for (int j = 0; j <= 9; j++){
                if (freq[j] == 0)
                    continue;
                freq[j]--;
                for (int k = 0; k <= 8; k += 2){
                    if (freq[k] == 0)
                        continue;
                    list.add(i * 100 + j * 10 + k);
                }
                freq[j]++;
            }
            freq[i]++;
        }
        int n = list.size();
        int[] res = new int[n];
        for (int i = 0; i < n; i++)
            res[i] = list.get(i);
        return res;
    }
}
_________________________________________________________





Problem Statement : 
You are given an integer array digits, where each element is a digit. The array may contain duplicates.
You need to find all the unique integers that follow the given requirements:

The integer consists of the concatenation of three elements from digits in any arbitrary order.
The integer does not have leading zeros.
The integer is even.
For example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements.

Return a sorted array of the unique integers.






Approach :
Count digit frequencies:
Create an array freq to store the count of each digit (0-9) from the input digits array.

Iterate through possible first digits (1-9):
Since a 3-digit number cannot start with 0, the first digit (i) must be in the range [1-9].
If i is available in freq, decrement its count before proceeding.

Iterate through possible middle digits (0-9):
Any digit can be the middle digit (j), so iterate over the full range [0-9].
If j is available in freq, decrement its count before proceeding.

Iterate through possible last digits (even numbers):
The last digit (k) must be even, so iterate through [0, 2, 4, 6, 8].
If k is available in freq, add the number (i * 100 + j * 10 + k) to the result list.

Restore used digits:
Once a complete number is formed, restore j and i to their original count in freq to ensure every digit is reused correctly.

Store results:
Convert the result list into an array and return it.






Complexity : 
Time Complexity : O(n)
Space Complexity : O(1)