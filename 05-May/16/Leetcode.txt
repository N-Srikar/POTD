2901. Longest Unequal Adjacent Groups Subsequence II
________________________________________________________


class Solution {
    public List<String> getWordsInLongestSubsequence(String[] words, int[] groups) {
        int n = words.length;
        int[] dp = new int[n];
        int[] prev = new int[n];
        Arrays.fill(dp, 1);
        Arrays.fill(prev, -1);

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (groups[i] != groups[j] &&
                    words[i].length() == words[j].length() &&
                    hammingDistance(words[i], words[j]) == 1) {
                    
                    if (dp[j] + 1 > dp[i]) {
                        dp[i] = dp[j] + 1;
                        prev[i] = j;
                    }
                }
            }
        }

        int maxIdx = 0;
        for (int i = 1; i < n; ++i) {
            if (dp[i] > dp[maxIdx]) {
                maxIdx = i;
            }
        }

        List<String> result = new ArrayList<>();
        while (maxIdx != -1) {
            result.add(words[maxIdx]);
            maxIdx = prev[maxIdx];
        }
        Collections.reverse(result);
        return result;
    }

    private int hammingDistance(String a, String b) {
        int count = 0;
        for (int i = 0; i < a.length(); ++i) {
            if (a.charAt(i) != b.charAt(i)) count++;
        }
        return count;
    }
}

________________________________________________________





Problem Statement :
You are given a string array words, and an array groups, both arrays having length n.

The hamming distance between two strings of equal length is the number of positions at which the corresponding characters are different.

You need to select the longest subsequence from an array of indices [0, 1, ..., n - 1], such that for the subsequence denoted as [i0, i1, ..., ik-1] having length k, the following holds:

For adjacent indices in the subsequence, their corresponding groups are unequal, i.e., groups[ij] != groups[ij+1], for each j where 0 < j + 1 < k.
words[ij] and words[ij+1] are equal in length, and the hamming distance between them is 1, where 0 < j + 1 < k, for all indices in the subsequence.
Return a string array containing the words corresponding to the indices (in order) in the selected subsequence. If there are multiple answers, return any of them.

Note: strings in words may be unequal in length.







Approach :
Model the problem as a graph:
Each word is a node.

Add a directed edge from word i to word j if:
groups[i] != groups[j]
words[i] and words[j] have equal length.
Their Hamming distance is exactly 1.

Dynamic Programming over DAG (Directed Acyclic Graph):

For each word, track:
dp[i]: length of the longest valid subsequence ending at index i.
prev[i]: to reconstruct the sequence.

Iterate over all pairs (i, j):
If the conditions are satisfied from i to j, update dp[j] and prev[j] accordingly.

Backtrack from the max dp index to build the final result.






Complexity : 
Time Complexity : O(n² × L)
Space Complexity : O(n)

