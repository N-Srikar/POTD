Smallest range in K lists
___________________________________________________________

class Solution {
    static class Node {
        int val, row, col;
        Node(int val, int row, int col) {
            this.val = val;
            this.row = row;
            this.col = col;
        }
    }

    public ArrayList<Integer> findSmallestRange(int[][] arr) {
        int k = arr.length;
        int n = arr[0].length;

        PriorityQueue<Node> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a.val));
        int max = Integer.MIN_VALUE;

        for (int i = 0; i < k; i++) {
            minHeap.offer(new Node(arr[i][0], i, 0));
            max = Math.max(max, arr[i][0]);
        }

        int rangeStart = 0, rangeEnd = Integer.MAX_VALUE;

        while (true) {
            Node curr = minHeap.poll();
            int min = curr.val;

            if (max - min < rangeEnd - rangeStart) {
                rangeStart = min;
                rangeEnd = max;
            }

            if (curr.col + 1 < n) {
                int nextVal = arr[curr.row][curr.col + 1];
                minHeap.offer(new Node(nextVal, curr.row, curr.col + 1));
                max = Math.max(max, nextVal);
            } else {
                break;
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        result.add(rangeStart);
        result.add(rangeEnd);
        return result;
    }
}

___________________________________________________________




Problem Statement : 
Given a 2d integer array arr[][] of size k*n, where each row is sorted in ascending order. Your task is to find the smallest range [l, r] that includes at least one element from each of the k lists. If more than one such ranges are found, return the first one.





Approach : 
Use a min-heap to keep track of the current smallest element among the current elements from each list.

Maintain a variable max to store the current maximum value among the elements in the heap.

Initially, insert the first element from each of the k lists into the min-heap, and update max.

Track the smallest range [start, end] by checking the difference between max and the min element from the heap.

Pop the smallest element from the heap.

If the corresponding list has more elements, push the next element from that list into the heap and update max if needed.

Stop when any list gets exhausted (i.e., we can no longer include an element from all lists).

Return the recorded [start, end] range.







Complexity : 
Time Complexity : O(n * k * log k)
Space Complexity : O(1)