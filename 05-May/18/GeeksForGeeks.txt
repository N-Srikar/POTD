Level Order in spiral form
________________________________________________________

class Solution {
    public ArrayList<Integer> findSpiral(Node root) {
        ArrayList<Integer> res = new ArrayList<>();
        if (root == null) return res;

        Stack<Node> s1 = new Stack<>();
        Stack<Node> s2 = new Stack<>();
        s1.push(root);

        while (!s1.isEmpty() || !s2.isEmpty()) {
            while (!s1.isEmpty()) {
                Node node = s1.pop();
                res.add(node.data);
                if (node.right != null) s2.push(node.right);
                if (node.left != null) s2.push(node.left);
            }
            while (!s2.isEmpty()) {
                Node node = s2.pop();
                res.add(node.data);
                if (node.left != null) s1.push(node.left);
                if (node.right != null) s1.push(node.right);
            }
        }
        return res;
    }
}

________________________________________________________




Problem Statement : 
Given a binary tree and the task is to find the spiral order traversal of the tree and return the list containing the elements.
Spiral order Traversal mean: Starting from level 0 for root node, for all the even levels we print the node's value from right to left and for all the odd levels we print the node's value from left to right.
For below tree, function should return [1, 2, 3, 4, 5, 6, 7]





Approach : 
We use two stacks to perform the level-order traversal in spiral form:

Steps:
Initialize two stacks:
stack1 for even levels (right to left)
stack2 for odd levels (left to right)

Push the root node into stack1.

While either stack is not empty:
While stack1 is not empty:
Pop node, add to result.
Push right child, then left child to stack2.

While stack2 is not empty:
Pop node, add to result.
Push left child, then right child to stack1.

This alternating pushing order maintains the spiral pattern.






Complexity : 
Time Complexity : O(n)
Space Complexity : O(1)