2071. Maximum Number of Tasks You Can Assign
________________________________________________________

class Solution {
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        Arrays.sort(tasks);
        Arrays.sort(workers);
        int low = 0, high = Math.min(tasks.length, workers.length);

        while (low < high) {
            int mid = (low+high+1) / 2;
            if (canAssign(tasks, workers, pills, strength, mid)) {
                low = mid;
            } 
            else {
                high = mid - 1;
            }
        }

        return low;
    }

    private boolean canAssign(int[] tasks, int[] workers, int pills, int strength, int taskCount) {
        Deque<Integer> boosted = new ArrayDeque<>();
        int w = workers.length - 1;
        int freePills = pills;

        for (int t=taskCount-1 ; t>=0 ; t--) {
            int task = tasks[t];

            if (!boosted.isEmpty() && boosted.peekFirst() >= task) {
                boosted.pollFirst();
            } 
            else if (w>=0 && workers[w]>=task) {
                w--;
            } 
            else {
                while (w>=0 && workers[w]+strength >= task) {
                    boosted.addLast(workers[w--]);
                }
                if (boosted.isEmpty() || freePills==0) {
                    return false;
                }
                boosted.pollLast();
                freePills--;
            }
        }

        return true;
    }
}
________________________________________________________

Problem Statement : 
You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).

Additionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.

Given the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.




Approach : 
Sort both tasks and workers in ascending order.

Use binary search to find the maximum mid number of tasks that can be completed.

For each mid, check if it is possible to assign mid tasks using a helper function canAssign().

Inside canAssign():
Try to assign from the hardest task down.
First, try a worker without a pill.
If not strong enough, try boosting weaker workers with a pill using a deque.
If none can do the task, return false.

Continue until the optimal number of tasks is found.



Complexity : 
Time Complexity : O(nlogn + mlogm + log( min(n,m)) â‹… (n+m))
Space Complexity : O(n + m)