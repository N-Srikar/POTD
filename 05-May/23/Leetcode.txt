3068. Find the Maximum Sum of Node Values
_________________________________________________________

class Solution {
    public long maximumValueSum(int[] nums, int k, int[][] edges) {
        int n = nums.length;
        long[][] temp = new long[n][2];
        for (int i = 0; i < n; i++) {
            temp[i][0] = -1;
            temp[i][1] = -1;
        }

        return calculateMax(nums, n, k, 0, 1, temp);  
    }

    private long calculateMax(int[] nums, int n, int k, int curInd, int isEven, long[][] temp) {
        if (curInd == n) { 
            return isEven == 1 ? 0 : Long.MIN_VALUE;
        }
        if (temp[curInd][isEven] != -1) {  
            return temp[curInd][isEven];
        }

        long noXor = nums[curInd] + calculateMax(nums, n, k, curInd + 1, isEven, temp); 
        long withXor = (nums[curInd] ^ k) + calculateMax(nums, n, k, curInd + 1, 1 - isEven, temp);  

        long mxPossible = Math.max(noXor, withXor);
        temp[curInd][isEven] = mxPossible;
        return mxPossible;
    }
}
_________________________________________________________




Problem Statement : 
There exists an undirected tree with n nodes numbered 0 to n - 1. You are given a 0-indexed 2D integer array edges of length n - 1, where edges[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the tree. You are also given a positive integer k, and a 0-indexed array of non-negative integers nums of length n, where nums[i] represents the value of the node numbered i.

Alice wants the sum of values of tree nodes to be maximum, for which Alice can perform the following operation any number of times (including zero) on the tree:

Choose any edge [u, v] connecting the nodes u and v, and update their values as follows:
nums[u] = nums[u] XOR k
nums[v] = nums[v] XOR k
Return the maximum possible sum of the values Alice can achieve by performing the operation any number of times.





Approach : 
Initialize memoization array (temp) to store results and prevent redundant computations.

Choose the root node (0) to ensure the entire tree is traversed.

Recursive traversal:
Track the current node and the parity of XORed nodes.

If the last node is reached:
Return 0 if the number of XORed nodes is even.
Return -inf if the number of XORed nodes is odd (since XOR must be applied in pairs).

Check if the current state exists in temp:
If yes, return its stored value.

Recursively compute two possibilities:
Without XOR: Sum the current node's value with the next state.
With XOR: Apply XOR to the current node's value and sum with the next state (flip parity).

Store the maximum of the two values in temp.

Return the final result from the recursive function using node 0 as root and is_even = true.






Complexity :
Time Complexity : O(n)
Space Complexity : O(n)