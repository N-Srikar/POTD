3373. Maximize the Number of Target Nodes After Connecting Trees II
________________________________________________________

class Solution {
    Map<Integer, List<Integer>> tree1, tree2;
    int[] color1, color2;
    int[] nodeColor1, nodeColor2;
    void build(int[][] edges, Map<Integer, List<Integer>> map) {
        int n = edges.length + 1;
        for(int i = 0; i < n; i++) map.put(i, new LinkedList<>());
        for(int[] e : edges) {
            map.get(e[0]).add(e[1]);
            map.get(e[1]).add(e[0]);
        }
    }
    void bfs(Map<Integer, List<Integer>> map, int[] color, int[] col) {
        int n = map.size();
        Queue<int[]> q = new LinkedList<>();
        boolean[] vis = new boolean[n];
        q.add(new int[]{0, 0});
        while(!q.isEmpty()) {
            int[] top = q.poll();
            vis[top[0]] = true;
            col[top[0]] = top[1];
            color[top[1]]++;
            for(int adj : map.get(top[0])) if(!vis[adj]) {
                // (top[1] + 1) % 2 to ensure [0, 1] coloring.
                q.add(new int[]{adj, (top[1] + 1) % 2});
            }
        }
    }
    public int[] maxTargetNodes(int[][] edges1, int[][] edges2) {
        int n = edges1.length + 1, m = edges2.length + 1;
        tree1 = new HashMap<>(); tree2 = new HashMap<>(); 
        color1 = new int[2]; color2 = new int[2];
        nodeColor1 = new int[n]; nodeColor2 = new int[m];
        // build the trees
        build(edges1, tree1); 
        build(edges2, tree2);
        // use bfs to color trees.
        bfs(tree1, color1, nodeColor1);
        bfs(tree2, color2, nodeColor2);
        int[] arr = new int[n]; 
        int max = Math.max(color2[0], color2[1]);
        for(int i = 0; i < n; i++) {
            arr[i] = color1[nodeColor1[i]] + max;
        }
        return arr;
    }
}
________________________________________________________




Problem Statement : 
There exist two undirected trees with n and m nodes, labeled from [0, n - 1] and [0, m - 1], respectively.

You are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree.

Node u is target to node v if the number of edges on the path from u to v is even. Note that a node is always target to itself.

Return an array of n integers answer, where answer[i] is the maximum possible number of nodes that are target to node i of the first tree if you had to connect one node from the first tree to another node in the second tree.

Note that queries are independent from each other. That is, for every query you will remove the added edge before proceeding to the next query.

 




Approach : 
Build the adjacency list for both trees
Represent each tree as a graph using an adjacency list.
This helps in efficiently traversing the tree using Breadth-First Search (BFS).
Since trees do not have cycles, adjacency lists provide a clean way to store connections.

Perform BFS to color the nodes of each tree
Start BFS from node 0 and assign a starting color (0 or 1).
Alternate colors while visiting adjacent nodes to maintain proper coloring.
Since the tree is acyclic, adjacent nodes always get different colors, ensuring that nodes of the same color are at an even distance from each other.

Track color counts for both trees
Store the color of each node in a nodeColor array.
Maintain color[0] and color[1] to count the number of nodes belonging to each color.
This step is essential for efficiently answering queries later.

Answer queries efficiently
For each query on the first tree (ith node), find its assigned color (nodeColor1[i]).
Since we can attach the ith node to the second tree, we maximize its connection by greedily adding the count of nodes with the same color to max(color2[0], color2[1]).
This ensures the maximum possible number of nodes at even distances





Complexity : 
Time Complexity : O(n + m)
Space Complexity : O(n + m)