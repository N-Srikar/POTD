2918. Minimum Equal Sum of Two Arrays After Replacing Zeros
_________________________________________________________

class Solution {
    public long minSum(int[] nums1, int[] nums2) {
        long nums1Zeroes = 0, nums2Zeroes = 0,sum1 = 0, sum2 = 0;
        for(int i : nums1){
            if(i == 0) nums1Zeroes++;
            sum1 += i;
        }

        for(int i : nums2){
            if(i == 0) nums2Zeroes++;
            sum2 += i;
        }

        long min1 = sum1 + nums1Zeroes;
        long min2 = sum2 + nums2Zeroes;

        if(nums1Zeroes == 0 && nums2Zeroes == 0){
            return sum1 == sum2 ? sum1 : -1;
        }else if(nums1Zeroes == 0){
            return sum2 + nums2Zeroes <=sum1 ?sum1 : -1;
        }else if (nums2Zeroes == 0){
            return sum1 + nums1Zeroes <= sum2 ? sum2 : -1;
        }
        return Math.max(min1, min2);
    }
}
_________________________________________________________



Problem Statement : 
You are given two arrays nums1 and nums2 consisting of positive integers.
You have to replace all the 0's in both arrays with strictly positive integers such that the sum of elements of both arrays becomes equal.

Return the minimum equal sum you can obtain, or -1 if it is impossible.





Approach :
Initialize variables:
Count zeros in both arrays (nums1Zeroes, nums2Zeroes).
Compute current sums (sum1, sum2).

Calculate minimum possible sums:
min1 = sum1 + nums1Zeroes
min2 = sum2 + nums2Zeroes
These represent the smallest sums achievable if all zeros become 1.

Handle cases where neither array contains zeros:
If nums1Zeroes == 0 && nums2Zeroes == 0
Return sum1 if sum1 == sum2, otherwise return -1.

Handle cases where only one array contains zeros:
If nums2Zeroes == 0: Check if min1 <= sum2, return sum2 if valid, otherwise return -1.
If nums1Zeroes == 0: Check if min2 <= sum1, return sum1 if valid, otherwise return -1.

Handle cases where both arrays contain zeros:
The answer is the maximum of the minimum possible sums: return Math.max(min1, min2).





Complexity : 
Time Complexity : O(n)
Space Complexity : O(1)