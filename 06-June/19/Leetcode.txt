2294. Partition Array Such That Maximum Difference Is K
________________________________________________________

class Solution {
    public int partitionArray(int[] nums, int k) {
        Arrays.sort(nums);
        int ans = 1;
        int min = nums[0];
        for (int i = 1;  i < nums.length; i++) {
            if (nums[i] - min > k) {
                ans++;
                min = nums[i];
            }
        }
        return ans;
    }
}
________________________________________________________




Problem Statement : 
You are given an integer array nums and an integer k. You may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences.

Return the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 



Approach : 
1. Sort the Array: Ensures elements are in ascending order.

2 . Initialize:
ans = 1 (minimum one subsequence needed)
min = nums[0] (first element as the initial min)

3 . Iterate and Partition:
For each subsequent element, check if it can be part of the current subsequence (nums[i] - min â‰¤ k).
If not, increment ans and update min to start a new subsequence.

4. return the result.





Complexity : 
Time Complexity : O(n logn)
Space Complexity : O(1)