Count pairs Sum in matrices
________________________________________________________

class Solution {
    public int countPairs(int[][] mat1, int[][] mat2, int x) {
        int n = mat1.length; 
        int count = 0;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int target = x - mat1[i][j]; 
                
                int left = 0;
                int right = n - 1;
                
                while (left < n && right >= 0) {
                    if (mat2[left][right] == target) {
                        count++; 
                        break;    
                    } else if (mat2[left][right] < target) {
                        left++; 
                    } else {
                        right--; 
                    }
                }
            }
        }
        
        return count; 
    }
}

________________________________________________________




Problem Statement : 
Given two matrices mat1[][] and mat2[][] of size n x n, where the elements in each matrix are arranged in strictly ascending order. Specifically, each row is sorted from left to right, and the last element of a row is smaller than the first element of the next row.
You're given a target value x, your task is to find and count all pairs {a, b} such that a is from mat1 and b is from mat2 where the sum of a + b is equal to x.




Approach : 
Outer Loop: Iterate over each element in mat1.

Two-Pointer Search: For each element in mat1[i][j], we will search for the complement in mat2 using the two-pointer technique.

Pointers: Initialize two pointers:
left pointer starts at the beginning of the row in mat2.
right pointer starts at the end of the row in mat2.

Move the pointers based on the current sum:
If the sum is equal to x, count the pair and move both pointers.
If the sum is less than x, move the left pointer to the right (to increase the sum).
If the sum is greater than x, move the right pointer to the left (to decrease the sum).




Complexity : 
Time Complexity : 
Space Complexity : 