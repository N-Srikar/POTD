Game with String
________________________________________________________

class Solution {
    public int minValue(String s, int k) {
        int[] freq = new int[26];

        // Step 1: Count frequencies
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }

        // Step 2: Use Max Heap
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        for (int f : freq) {
            if (f > 0) {
                maxHeap.add(f);
            }
        }

        // Step 3: Remove k characters
        while (k-- > 0 && !maxHeap.isEmpty()) {
            int top = maxHeap.poll();
            top--;
            if (top > 0) {
                maxHeap.add(top);
            }
        }

        // Step 4: Compute final value
        int result = 0;
        while (!maxHeap.isEmpty()) {
            int val = maxHeap.poll();
            result += val * val;
        }

        return result;
    }
}

________________________________________________________





Problem Statement :
Given a string s consisting of lowercase alphabets and an integer k, your task is to find the minimum possible value of the string after removing exactly k characters.

The value of the string is defined as the sum of the squares of the frequencies of each distinct character present in the string.





Approach :
Count character frequencies using a HashMap or an array.

Use a Max Heap (PriorityQueue) to always reduce the character with the highest frequency (since reducing high frequency lowers the square value the most).

Perform the following for k times:
Extract the character with the highest frequency from the max heap.
Decrease its frequency by 1.
Push it back if it's still > 0.

After removing k characters, 
calculate the final value by summing the squares of remaining frequencies.





Complexity : 
Time Complexity : O(n + k)
Space Complexity : O(1)