2311. Longest Binary Subsequence Less Than or Equal to K
_______________________________________________________

class Solution {
    public int longestSubsequence(String s, int k) {
        int sm = 0;
        int cnt = 0;
        int bits = (int) (Math.log(k) / Math.log(2)) + 1;
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(s.length() - 1 - i);
            if (ch == '1') {
                if (i < bits && sm + (1 << i) <= k) {
                    sm += 1 << i;
                    cnt++;
                }
            } else {
                cnt++;
            }
        }
        return cnt;
    }
}
_______________________________________________________





Problem Statement :
You are given a binary string s and a positive integer k.

Return the length of the longest subsequence of s that makes up a binary number less than or equal to k.

Note:
The subsequence can contain leading zeroes.
The empty string is considered to be equal to 0.
A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.






Approach : 
Initialize:
cnt = 0: Count of characters we can include.
sum = 0: Accumulated binary value of selected bits.
bits = floor(log2(k)) + 1: Max bit-length of any binary number ≤ k.

Traverse the string s from the end (right to left, least significant to most significant bit):
If the character is '0': always include it → cnt++
If the character is '1': Only include it if,
It’s within the valid bit-length (i < bits).
Including it doesn’t make sum > k.

Return cnt: the count of characters included in the longest valid subsequence.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(1)