1432. Max Difference You Can Get From Changing an Integer
_______________________________________________________

class Solution {
    public int maxDiff(int num) {
        String numStr = String.valueOf(num);
        Set<Character> uniqueDigits = new HashSet<>();
        for (char ch : numStr.toCharArray()) {
            uniqueDigits.add(ch);
        }

        int maxVal = num, minVal = num;

        for (char digit : uniqueDigits) {
            for (char newDigit = '0'; newDigit <= '9'; newDigit++) {
                if (numStr.charAt(0) == digit && newDigit == '0') continue;
                String newNumStr = numStr.replace(digit, newDigit);
                int newNum = Integer.parseInt(newNumStr);
                maxVal = Math.max(maxVal, newNum);
                minVal = Math.min(minVal, newNum);
            }
        }
        return maxVal - minVal;
    }
}
_______________________________________________________




Problem Statement :
You are given an integer num. You will apply the following steps to num two separate times:

Pick a digit x (0 <= x <= 9).
Pick another digit y (0 <= y <= 9). Note y can be equal to x.
Replace all the occurrences of x in the decimal representation of num by y.
Let a and b be the two results from applying the operation to num independently.

Return the max difference between a and b.

Note that neither a nor b may have any leading zeros, and must not be 0.





Approach :
Convert the number to a string for easy digit manipulation.
To get the maximum number:
Replace the first digit that is not 9 with 9 throughout.
To get the minimum number:
If the first digit is not 1, replace it with 1.
Else, replace the next non-zero, non-one digit with 0.
Return the difference between the maximum and minimum numbers.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)