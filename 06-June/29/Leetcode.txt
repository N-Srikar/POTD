1498. Number of Subsequences That Satisfy the Given Sum Condition
_________________________________________________________

class Solution {
    public int numSubseq(int[] nums, int target) {
        int mod = 1000000007 , n = nums.length;
        Arrays.sort(nums);
        
        int[] power = new int[n];
        power[0] = 1;
        for (int i = 1; i < n; i++) {
            power[i] = (power[i - 1] * 2) % mod;
        }
        int left = 0 , right = n - 1 , result = 0;

        while (left <= right) {
            if (nums[left] + nums[right] <= target) {
                result = (result + power[right - left]) % mod;
                left++;
            } else {
                right--;
            }
        }
        return result;
    }
}
_________________________________________________________




Problem Statement :
You are given an array of integers nums and an integer target.

Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 10^9 + 7.





Approach : 
Sort the Array
Enables two-pointer technique to find valid min-max pairs efficiently.

Precompute Powers of 2
Calculate power[i] = 2^i % mod to quickly determine the number of valid subsequences in any window.

Two-Pointer Technique
Initialize left = 0 (min) and right = n-1 (max).

For each window:
If nums[left] + nums[right] ≤ target:
All subsequences in this window are valid → add 2^(right-left) to result.
Move left++ to explore larger minimums.

Else:
Move right-- to try smaller maximums.
Modulo Operation

Ensures results stay within bounds for large numbers.






Complexity : 
Time Complexity : O(n logn)
Space Complexity : O(n)