2099. Find Subsequence of Length K With the Largest Sum
________________________________________________________

class Solution {
    public int[] maxSubsequence(int[] nums, int k) {
        int[][] valueWithIndex = new int[nums.length][2];
        for (int i = 0; i < nums.length; i++) {
            valueWithIndex[i] = new int[]{nums[i], i};
        }
        
        Arrays.sort(valueWithIndex, (a, b) -> b[0] - a[0]);
        
        Arrays.sort(valueWithIndex, 0, k, (a, b) -> a[1] - b[1]);
        
        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = valueWithIndex[i][0];
        }
        
        return result;
    }
}
________________________________________________________



Problem Statement :
You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.

Return any such subsequence as an integer array of length k.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.




Approach : 
Pair each element with its index â†’ [value, index].
Sort in descending order of values.
Select the top k elements (largest values).
Sort these k elements by their original indices to maintain order.
Extract the values to form the result.





Complexity : 
Time Complexity : O(n logn)
Space Complexity : O(n)