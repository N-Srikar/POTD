Sum-string
________________________________________________________

class Solution {
    public boolean isSumString(String s) {
        int n = s.length();
        
        for (int i = 1; i <= n / 2; i++) {
            for (int j = i + 1; j < n; j++) {
                String num1 = s.substring(0, i);
                String num2 = s.substring(i, j);
                
                if ((num1.length() > 1 && num1.charAt(0) == '0') || 
                    (num2.length() > 1 && num2.charAt(0) == '0')) {
                    continue;
                }
                
                if (isValid(s, num1, num2, j)) return true;
            }
        }
        return false;
    }

    private boolean isValid(String s, String num1, String num2, int start) {
        if (start == s.length()) return true;

        String sum = stringAdd(num1, num2);

        if (!s.startsWith(sum, start)) return false;

        return isValid(s, num2, sum, start + sum.length());
    }

    private String stringAdd(String num1, String num2) {
        StringBuilder result = new StringBuilder();

        int i = num1.length() - 1, j = num2.length() - 1, carry = 0;

        while (i >= 0 || j >= 0 || carry > 0) {
            int digit1 = (i >= 0) ? num1.charAt(i--) - '0' : 0;
            int digit2 = (j >= 0) ? num2.charAt(j--) - '0' : 0;

            int sum = digit1 + digit2 + carry;
            result.append(sum % 10);
            carry = sum / 10;
        }

        return result.reverse().toString();
    }
}

________________________________________________________



Problem Statement : 
Given a string s consisting of digits, determine whether it can be classified as a sum-string.

A sum-string is a string that can be split into more than two non-empty substrings such that:
The rightmost substring is equal to the sum of the two substrings immediately before it (interpreted as integers).

This condition must apply recursively to the substrings before it.
The rightmost substring (and any number in the sum) must not contain leading zeroes, unless the number is exactly '0'.






Approach : 
Try All Possible First Two Numbers
Loop over all possible splits for the first number (num1) and the second number (num2) in the string s.
These must be valid numbers (no leading zeros unless it's '0').

Generate the Next Number in the Sequence
Add num1 and num2 as strings using a helper function (stringAdd) to get the expected next number.

Check If the Next Number Matches the Next Substring
If it matches, continue recursively:
Now num2 becomes the new num1
The sum becomes the new num2
Repeat this process and move forward in the string.

If You Reach the End Successfully
That means the string can be split in the required way â€” return true.

Try All Valid Combinations
If one combination fails, try other possible pairs of num1 and num2 using nested loops until all are exhausted.






Complexity : 
Time Complexity : O(n^3)
Space Complexity : O(n)