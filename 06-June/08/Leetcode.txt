386. Lexicographical Numbers
________________________________________________________

class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> lst = new ArrayList<>();
        dfs(lst, n, 0);
        return lst;       
    }
    
    private void dfs(List<Integer> lst, int n, int num) {
        
        for(int i = 0; i <=9; i++) {
            int cur = 10*num + i;
			//get rid of 0
            if(cur == 0) continue;
			// when larger than n, return to the previous level
            if (cur > n) return;
            lst.add(cur);
            dfs(lst, n, cur);
        }
    }
}
________________________________________________________




Problem Statement : 
Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.

You must write an algorithm that runs in O(n) time and uses O(1) extra space. 





Approach : 
Start DFS from each digit 1 to 9.

For each number cur:
Add cur to the result list.
Recurse into its children: cur*10 + i for i = 0 to 9.

Stop recursion when cur > n.

Skip leading 0s by not starting DFS with 0.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(1)