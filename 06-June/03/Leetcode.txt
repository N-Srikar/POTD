1298. Maximum Candies You Can Get from Boxes
________________________________________________________

class Solution {
    public int maxCandies(int[] status,int[] candies,int[][] keys,int[][] containedBoxes,int[] initialBoxes) {

        int count=0; 
        boolean[] vis=new boolean[status.length];
        for(int v:initialBoxes){
            dfs(v,status,keys,containedBoxes,vis);
        }

        for(int i=0;i<candies.length;i++){
            if(vis[i] && status[i] == 1){
                count+=candies[i];
            }
        }
        return count;
    }

    public void dfs(int v,int[] status,int[][] keys,int[][] containedBoxes,boolean[] vis){ 

        vis[v]=true; 
        for(int i:keys[v]){
            if(i==v) continue; 
            status[i]=1;
        }

        for(int vContained:containedBoxes[v]){
            if(!vis[vContained]){
                dfs(vContained,status,keys,containedBoxes,vis);
            }
        }
    }
}
________________________________________________________





Problem Statement : 
You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:

status[i] is 1 if the ith box is open and 0 if the ith box is closed,
candies[i] is the number of candies in the ith box,
keys[i] is a list of the labels of the boxes you can open after opening the ith box.
containedBoxes[i] is a list of the boxes you found inside the ith box.
You are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.

Return the maximum number of candies you can get following the rules above.




Approach : 
Use a vis boolean array to mark which boxes have been visited to prevent cycles.

For every box in the initialBoxes list:
Perform a DFS traversal if it hasn't been visited yet.

In the DFS function:
Mark the current box as visited.
Unlock all boxes for which we found keys in this box.
Recursively explore all boxes contained inside this one.

After DFS, sum the candies from all boxes that are:
Visited and currently open (status[i] == 1)

Return the total number of candies collected.





Complexity :
Time Complextity : O(n + k)
Space Complexity : O(n)