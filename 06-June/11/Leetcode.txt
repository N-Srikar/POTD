3445. Maximum Difference Between Even and Odd Frequency II
_________________________________________________________

class Solution {
    private static final int MOD = (int) 1e8;
    private int maxDfromAtoB(int a, int b, int k, int n, int[][] freq) {
        int cnt = Integer.MIN_VALUE;
        int[][] minFreq = { {MOD, MOD}, {MOD, MOD} };
        int freqA = 0, freqB = 0;
        int prevA = 0, prevB = 0;
        int l = 0;
        for (int r = k - 1; r < n; r++) {
            freqA = freq[a][r + 1];
            freqB = freq[b][r + 1];
            while (r - l + 1 >= k && freqB - prevB >= 2) {
                minFreq[prevA & 1][prevB & 1] = Math.min(minFreq[prevA & 1][prevB & 1], prevA - prevB);
                prevA = freq[a][l + 1];
                prevB = freq[b][l + 1];
                l++;
            }
            cnt = Math.max(cnt, freqA - freqB - minFreq[1 - (freqA & 1)][freqB & 1]);
        }
        return cnt;
    }

    public int maxDifference(String s, int k) {
        int n = s.length();
        int[][] freq = new int[5][n + 1];
        for (int i = 0; i < n; i++) {
            for (int d = 0; d < 5; d++) {
                freq[d][i + 1] = freq[d][i];
            }
            freq[s.charAt(i) - '0'][i + 1]++;
        }
        int ans = Integer.MIN_VALUE;
        for (int a = 0; a < 5; a++) {
            if (freq[a][n] == 0)
                continue;
            for (int b = 0; b < 5; b++) {
                if (a == b || freq[b][n] == 0)
                    continue;
                ans = Math.max(ans, maxDfromAtoB(a, b, k, n, freq));
            }
        }
        return ans;
    }
}
_________________________________________________________




Problem Statement :
You are given a string s and an integer k. Your task is to find the maximum difference between the frequency of two characters, freq[a] - freq[b], in a substring subs of s, such that:
subs has a size of at least k.
Character a has an odd frequency in subs.
Character b has an even frequency in subs.

Return the maximum difference.

Note that subs can contain more than 2 distinct characters.





Approach : 
Prefix Sum Calculation: We first calculate the prefix sum for each of the 5 digits (0 to 4) in the given string. This helps us quickly determine the frequency of each digit in any substring of length k.

Sliding Window: We then move a sliding window of size k across the string, checking the frequency of each digit pair. We ensure that the difference between the frequencies of the two digits is maximized while adjusting the window dynamically.

Minimum Frequency: As we slide the window, we keep track of the minimum frequencies for each digit pair. This helps us efficiently calculate the difference in frequencies and update the result as we move the window.

Edge Case Handling: We handle cases where no occurrences of a particular digit are found and ensure that the window adjusts correctly to maintain the required size.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)