Minimum sum
________________________________________________________

class Solution {
    public String minSum(int[] arr) {
        Arrays.sort(arr);
        StringBuilder num1 = new StringBuilder();
        StringBuilder num2 = new StringBuilder();

        // Distribute digits alternately to two numbers
        for (int i = 0; i < arr.length; i++) {
            if (i % 2 == 0)
                num1.append(arr[i]);
            else
                num2.append(arr[i]);
        }

        // Perform manual string-based addition
        String sum = addStrings(num1.toString(), num2.toString());

        // Strip leading zeros
        int idx = 0;
        while (idx < sum.length() - 1 && sum.charAt(idx) == '0') {
            idx++;
        }

        return sum.substring(idx);
    }

    private String addStrings(String num1, String num2) {
        StringBuilder result = new StringBuilder();

        int i = num1.length() - 1;
        int j = num2.length() - 1;
        int carry = 0;

        while (i >= 0 || j >= 0 || carry > 0) {
            int digit1 = (i >= 0) ? num1.charAt(i--) - '0' : 0;
            int digit2 = (j >= 0) ? num2.charAt(j--) - '0' : 0;

            int sum = digit1 + digit2 + carry;
            result.append(sum % 10);
            carry = sum / 10;
        }

        return result.reverse().toString();
    }
}

________________________________________________________




Problem Statement : 
Given an array arr[ ] consisting of digits, your task is to form two numbers using all the digits such that their sum is minimized. Return the minimum possible sum as a string with no leading zeroes.




Approach :
Sort the digits in ascending order.

Distribute digits alternately to two strings num1 and num2.
Even indices → num1, Odd indices → num2.

Add num1 and num2 as strings, digit by digit (simulate addition).

Remove leading zeros from the result.

Return the final sum as a string.





Complexity : 
Time Complexity : O(n logn)
Space Complexity : O(n)