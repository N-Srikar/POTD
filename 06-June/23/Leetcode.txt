2081. Sum of k-Mirror Numbers
_______________________________________________________

class Solution {
    public long kMirror(int k, int n) {
        long sum = 0;
        int count = 0;

        int length = 1;

        while (count < n) {
            // Generate all base-10 palindromes of current length
            for (long num : generatePalindromes(length)) {
                if (isKPalindrome(num, k)) {
                    sum += num;
                    count++;
                    if (count == n) return sum;
                }
            }
            length++;
        }

        return sum;
    }

    // Generate base-10 palindromes of a given length
    private List<Long> generatePalindromes(int length) {
        List<Long> result = new ArrayList<>();

        int half = (length + 1) / 2;
        long start = (long)Math.pow(10, half - 1);
        long end = (long)Math.pow(10, half);

        for (long i = start; i < end; i++) {
            StringBuilder sb = new StringBuilder();
            sb.append(i);
            String firstHalf = sb.toString();

            // Mirror to make full palindrome
            if (length % 2 == 0) {
                sb.reverse();
            } else {
                sb.deleteCharAt(sb.length() - 1).reverse();
            }

            String secondHalf = sb.toString();
            String full = firstHalf + secondHalf;

            result.add(Long.parseLong(full));
        }

        return result;
    }

    // Check if num is palindrome in base-k
    private boolean isKPalindrome(long num, int k) {
        String baseK = convertToBaseK(num, k);
        return isPalindrome(baseK);
    }

    private String convertToBaseK(long num, int k) {
        StringBuilder sb = new StringBuilder();
        while (num > 0) {
            sb.append(num % k);
            num /= k;
        }
        return sb.reverse().toString();
    }

    private boolean isPalindrome(String s) {
        int i = 0, j = s.length() - 1;
        while (i < j) {
            if (s.charAt(i++) != s.charAt(j--)) return false;
        }
        return true;
    }
}

_______________________________________________________




Problem Statement :
A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.

For example, 
9 is a 2-mirror number. The representation of 9 in base-10 and base-2 are 9 and 1001 respectively, which read the same both forward and backward.
On the contrary, 4 is not a 2-mirror number. The representation of 4 in base-2 is 100, which does not read the same both forward and backward.


Given the base k and the number n, return the sum of the n smallest k-mirror numbers.





Approach : 
Generate base-10 palindromes in increasing order.
For each, convert to base-k and check if it's also a palindrome in base-k.
Count the first n such numbers, and sum them.
Return the final sum.




Complexity : 
Time Complexity : O(n logn)
Space Complexity : O(n)