2434. Using a Robot to Print the Lexicographically Smallest String
________________________________________________________

class Solution {
    public String robotWithString(String s) {
        int n = s.length();
        int[] freq = new int[26];
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }

        StringBuilder result = new StringBuilder();
        Stack<Integer> stack = new Stack<>();

        for (char c : s.toCharArray()) {
            int ch = c - 'a';
            freq[ch]--;
            stack.push(ch);

            while (!stack.isEmpty() && !hasSmaller(stack.peek(), freq)) {
                result.append((char) (stack.pop() + 'a'));
            }
        }

        return result.toString();
    }

    private boolean hasSmaller(int top, int[] freq) {
        for (int i = 0; i < top; i++) {
            if (freq[i] > 0) return true;
        }
        return false;
    }
}
________________________________________________________



Problem Statement :
You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:
Remove the first character of a string s and give it to the robot. The robot will append this character to the string t.
Remove the last character of a string t and give it to the robot. The robot will write this character on paper.
Return the lexicographically smallest string that can be written on the paper.





Approach :
Count character frequencies: This helps track whether any smaller character is still remaining.

Iterate over each character ch in s:
Decrement its frequency (since weâ€™re processing it).
Push it onto a stack.
Check if the stack's top character can be popped (i.e., no smaller character remains in the rest of the input).
If true, keep popping and appending to result.

Use a helper function hasSmaller(top) to check whether any character with smaller value than top is still left in the string.

Return the final built string.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)