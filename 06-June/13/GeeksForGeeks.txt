Koko Eating Bananas
_________________________________________________________

class Solution {
    public int kokoEat(int[] arr, int k) {
        int low = 1; 
        int high = 0;
        
        for (int bananas : arr) {
            high = Math.max(high, bananas);
        }

        while (low < high) {
            int mid = low + (high - low) / 2;
            if (canFinish(arr, k, mid)) {
                high = mid; 
            } else {
                low = mid + 1; 
            }
        }
        
        return low;
    }

    private boolean canFinish(int[] arr, int k, int s) {
        int hours = 0;
        for (int bananas : arr) {
            hours += (bananas + s - 1) / s;
        }
        return hours <= k;
    }
}

_________________________________________________________




Problem Statement :
Koko is given an array arr[], where each element represents a pile of bananas. She has exactly k hours to eat all the bananas.

Each hour, Koko can choose one pile and eat up to s bananas from it.
If the pile has atleast s bananas, she eats exactly s bananas.
If the pile has fewer than s bananas, she eats the entire pile in that hour.

Koko can only eat from one pile per hour.

Your task is to find the minimum value of s (bananas per hour) such that Koko can finish all the piles within k hours.





Approach :
Binary Search Setup:
The lower bound (low) is 1 (the minimum speed, where she eats 1 banana per hour).
The upper bound (high) is the largest pile size, i.e., max(piles) (this is the maximum speed, where she eats all bananas in one hour for the largest pile).

Binary Search Logic:
For each midpoint k in the range, compute the total hours required to eat all bananas if she eats at speed k.

If the total hours required is less than or equal to H, it means k is a valid eating speed, but we want to find the minimum speed, so we adjust the upper bound to search for smaller speeds.
If the total hours required is greater than H, it means k is too small, so we adjust the lower bound to search for larger speeds.

Stopping Condition:
The binary search continues until the bounds converge, and the minimum valid k is found.




Complexity : 
Time Complexity : O(n logn)
Space Complexity : O(1)