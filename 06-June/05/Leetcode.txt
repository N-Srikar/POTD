1061. Lexicographically Smallest Equivalent String
_________________________________________________________

class Solution {
    class UnionFind {
        private int[] parent;

        public UnionFind(int n) {
            parent = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
            }
        }

        public int find(int x) {
            if (parent[x] == x) {
                return x;
            }
            parent[x] = find(parent[x]);
            return parent[x];
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX != rootY) {
                if (rootX < rootY) {
                    parent[rootY] = rootX;
                } else {
                    parent[rootX] = rootY;
                }
            }
        }
    }

    public String smallestEquivalentString(String s1, String s2, String baseStr) {
        UnionFind uf = new UnionFind(26);

        for (int i = 0; i < s1.length(); i++) {
            uf.union(s1.charAt(i) - 'a', s2.charAt(i) - 'a');
        }

        StringBuilder result = new StringBuilder();
        for (char c : baseStr.toCharArray()) {
            result.append((char) (uf.find(c - 'a') + 'a'));
        }

        return result.toString();
    }
}
_________________________________________________________




Problem Statement : 
You are given two strings of the same length s1 and s2 and a string baseStr.

We say s1[i] and s2[i] are equivalent characters.

For example, if s1 = "abc" and s2 = "cde", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'.
Equivalent characters follow the usual rules of any equivalence relation:

Reflexivity: 'a' == 'a'.
Symmetry: 'a' == 'b' implies 'b' == 'a'.
Transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'.
For example, given the equivalency information from s1 = "abc" and s2 = "cde", "acd" and "aab" are equivalent strings of baseStr = "eed", and "aab" is the lexicographically smallest equivalent string of baseStr.

Return the lexicographically smallest equivalent string of baseStr by using the equivalency information from s1 and s2.






Approach : 
Initialize Union-Find:
Create a Union-Find data structure to represent equivalence between characters 'a' to 'z'.

Build Equivalence Map:
For each pair of characters at the same index in s1 and s2, use the union operation to connect them in the same set.

Union by Lexicographical Order:
When merging sets, always keep the lexicographically smaller character as the parent (representative) to ensure smallest equivalent mapping.

Transform baseStr:
For each character in baseStr, find its smallest equivalent representative using the find operation.

Build Result:
Append the smallest equivalent character to a result string using StringBuilder.

Return Final String:
Return the transformed string with all characters replaced by their smallest equivalents.






Complexity : 
Time Complexity : O(n + m)
Space Complexity : O(n)