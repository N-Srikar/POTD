Unique Paths in a Grid
_______________________________________________________

class Solution {
    public int uniquePaths(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        // If start or end cell is blocked
        if (grid[0][0] == 1 || grid[n - 1][m - 1] == 1) return 0;

        int[][] dp = new int[n][m];

        // Initialize the starting point
        dp[0][0] = 1;

        // Fill the DP table
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    dp[i][j] = 0; // Blocked cell
                } else {
                    if (i > 0) dp[i][j] += dp[i - 1][j];
                    if (j > 0) dp[i][j] += dp[i][j - 1];
                }
            }
        }

        return dp[n - 1][m - 1];
    }
}

_______________________________________________________




Problem Statement : 
You are given a 2d list grid[][] of size n x m consisting of values 0 and 1.
A value of 0 means that you can enter that cell and 1 implies that entry to that cell is not allowed.
You start at the upper-left corner of the grid (1, 1) and you have to reach the bottom-right corner (n, m) such that you can only move in the right or down direction from every cell.
Your task is to calculate the total number of ways of reaching the target.

Note: The first (1, 1) and last (n, m) cell of the grid can also be 1.
It is guaranteed that the total number of ways will fit within a 32-bit integer.





Approach : 
Check for Invalid Start or End:
If the starting cell (0, 0) or the ending cell (n-1, m-1) is blocked (i.e., has a value 1), return 0 immediately.

Initialize a DP Table:
Create a 2D array dp[n][m] to store the number of ways to reach each cell.
Set dp[0][0] = 1 since there's exactly one way to be at the start.

Iterate Over the Grid:
For each cell (i, j) in the grid:
If grid[i][j] == 1 (blocked), set dp[i][j] = 0.

Otherwise:
If i > 0, add dp[i-1][j] to dp[i][j] (from above).
If j > 0, add dp[i][j-1] to dp[i][j] (from the left).

Return the Result:
The total number of unique paths is stored in dp[n-1][m-1].





Complexity : 
Time Complexity : O(n * m)
Space Complexity : O(n * m)