135. Candy
__________________________________________________________

class Solution {
    public int candy(int[] ratings) {
        int n = ratings.length;
        int count = 0;
        int[] arr = new int[n];
        Arrays.fill(arr, 1);

        for (int i = 1; i < n; i++) {
            if (ratings[i] > ratings[i - 1]) {
                arr[i] = arr[i - 1] + 1; 
            }
        }

        for (int i = n - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i + 1] && arr[i] <= arr[i + 1]) {
                arr[i] = arr[i + 1] + 1;
            }
        }

        for (int i : arr) count += i;

        return count;
    }
}
__________________________________________________________



Problem Statement : 
There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.





Approach :
Initialize a candies array to track the minimum number of candies each child should get, starting with 1 candy for everyone.
Perform a left-to-right pass over the ratings array:
If a child's rating is higher than the previous child’s, increase their candy count by one.
Perform a right-to-left pass:
If a child's rating is higher than the next child’s and they have fewer or the same candies, increase their candy count by one.
Finally, sum up the values in the candies array to calculate the total number of candies needed.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)