Group Balls by Sequence
___________________________________________________________

class Solution {
    public boolean validgroup(int[] arr, int k) {
        int n = arr.length;
        if (n % k != 0) return false;  // Total elements must be divisible by k

        TreeMap<Integer, Integer> countMap = new TreeMap<>();

        // Count frequency of each number
        for (int num : arr) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }

        // Process the numbers in sorted order
        for (int num : countMap.keySet()) {
            int freq = countMap.get(num);
            if (freq > 0) {
                // Try to form a group starting from 'num' of size k
                for (int i = 0; i < k; i++) {
                    int curr = num + i;
                    if (!countMap.containsKey(curr) || countMap.get(curr) < freq) {
                        return false;
                    }
                    countMap.put(curr, countMap.get(curr) - freq);
                }
            }
        }

        return true;
    }
}

___________________________________________________________




Problem Statement : 
You are given an array arr[] of positive integers, where each element arr[i] represents the number written on the i-th ball, and a positive integer k.

Your task is to determine whether it is possible to rearrange all the balls into groups such that:
Each group contains exactly k balls.
The numbers in each group are consecutive integers




Approach : 
Check if total number of balls is divisible by k:
If not, itâ€™s impossible to form equal-sized groups.

Count the frequency of each number in the array.

Sort the keys (unique numbers) to process them in increasing order.

Try forming groups starting from the smallest number:
For each number, if it still has a count > 0, we try to create a group starting from it.
We must ensure that the next k-1 consecutive numbers also have at least that many counts.
Decrease the count for each number in the group accordingly.

If at any point a group can't be formed, return false.

If all groups are formed successfully, return true.




Complexity : 
Time Complexity : O(n logn)
Space Complexity : O(n)