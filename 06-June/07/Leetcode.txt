3170. Lexicographically Minimum String After Removing Stars
_________________________________________________________

class Solution {
    public String clearStars(String s){
        int n = s.length();
        
        List<List<Integer>> buckets = new ArrayList<>();
        
        for(int i = 0; i < 26; i++){
            buckets.add(new ArrayList<>());
        }
        
        boolean[] removed = new boolean[n];
        
        for (int i = 0 ; i < n ; i++){
            if(s.charAt(i) == '*'){
                removed[i] = true;
                for (int j = 0; j < 26; j++){
                    if (!buckets.get(j).isEmpty()){
                        removed[buckets.get(j).get(buckets.get(j).size() - 1)] = true;
                        buckets.get(j).remove(buckets.get(j).size() - 1);
                        break;
                    }
                }
            } 
            else{
                buckets.get(s.charAt(i) - 'a').add(i);
            }
        }
        
        StringBuilder ans = new StringBuilder();
        for(int i = 0 ; i < n ; i++){
            if(!removed[i]) ans.append(s.charAt(i));
        }
        return ans.toString();
    }
}
_________________________________________________________





Problem Statement : 
You are given a string s. It may contain any number of '*' characters. Your task is to remove all '*' characters.

While there is a '*', do the following operation:
Delete the leftmost '*' and the smallest non - '*' character to its left. 
If there are several smallest characters, you can delete any of them.

Return the lexicographically smallest resulting string after removing all '*' characters.






Approach : 
Initialize Buckets:
Create an array of 26 buckets (for characters 'a' to 'z') to store the positions (indices) of each character in the string.

Initialize Removal Tracker:
Use a boolean array removed[] to mark whether a character at a given index has been removed or not.

Iterate Through the String:
For each character:
If it is '*':
Find the smallest character ('a' to 'z') that has at least one unremoved occurrence before this '*'.
Among those, choose the rightmost index of that character.
Mark that index as removed in the removed[] array.

Otherwise:
Update the corresponding bucket by adding the index of the character.

Build the Final Result:
Traverse the original string.
Skip characters that are marked as removed.
Append the remaining characters to form the final answer.

Return the result string.






Complexity : 
Time Complexity : O(n * 26)
Space Complexity : O(n)