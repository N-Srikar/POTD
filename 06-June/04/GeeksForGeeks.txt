LCS of three strings
_______________________________________________________

class Solution {
    int lcsOf3(String s1, String s2, String s3) {
        int n = s1.length();
        int m = s2.length();
        int p = s3.length();
        
        // Create a 3D DP array
        int[][][] dp = new int[n + 1][m + 1][p + 1];
        
        // Build the DP table
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                for (int k = 1; k <= p; k++) {
                    if (s1.charAt(i - 1) == s2.charAt(j - 1) && s2.charAt(j - 1) == s3.charAt(k - 1)) {
                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;
                    } else {
                        dp[i][j][k] = Math.max(dp[i - 1][j][k], Math.max(dp[i][j - 1][k], dp[i][j][k - 1]));
                    }
                }
            }
        }
        
        // The answer is in the last cell
        return dp[n][m][p];
    }
}

_______________________________________________________




Problem Statement : 
Given three strings s1, s2, and s3 containing uppercase letters, lowercase letters, and digits, find the length of longest common sub-sequence in all three given strings.




Approach : 
Create a 3D DP Table:
Let dp[i][j][k] represent the length of the LCS of the first i characters of s1, the first j characters of s2, and the first k characters of s3.
The table size will be (n + 1) x (m + 1) x (p + 1) where n, m, and p are the lengths of s1, s2, and s3, respectively.

Initialize Base Case:
If any string is empty (i.e., i == 0, j == 0, or k == 0), then dp[i][j][k] = 0 because an empty string has no common subsequence with any other string.

Fill the DP Table:
Loop through all characters of the three strings using three nested loops:
For each combination of i, j, and k, check:
If s1[i-1] == s2[j-1] == s3[k-1], then:
dp[i][j][k] = dp[i-1][j-1][k-1] + 1

Otherwise, choose the maximum LCS length by excluding one string at a time:
dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])

Return the Result:
The final result, i.e., the length of the LCS of all three strings, is stored in dp[n][m][p].




Complexity : 
Time Complexity : O(a * b * c)
Space Complexity : O(a * b * c)
