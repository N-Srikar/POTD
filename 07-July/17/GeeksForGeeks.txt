Power of k in factorial of n
_______________________________________________________

class Solution {
    public int maxKPower(int n, int k) {
        // Step 1: Prime factorization of k
        Map<Integer, Integer> primeFactors = getPrimeFactors(k);

        int minPower = Integer.MAX_VALUE;

        // Step 2: For each prime factor, find exponent in n!
        for (Map.Entry<Integer, Integer> entry : primeFactors.entrySet()) {
            int prime = entry.getKey();
            int exponentInK = entry.getValue();

            int exponentInFact = countPrimeInFactorial(n, prime);

            // Step 3: Compute max power for this prime factor
            minPower = Math.min(minPower, exponentInFact / exponentInK);
        }

        return minPower;
    }

    // Function to count how many times 'p' appears in n!
    private int countPrimeInFactorial(int n, int p) {
        int count = 0;
        while (n > 0) {
            n /= p;
            count += n;
        }
        return count;
    }

    // Function to factorize k
    private Map<Integer, Integer> getPrimeFactors(int k) {
        Map<Integer, Integer> factors = new HashMap<>();
        for (int i = 2; i * i <= k; i++) {
            while (k % i == 0) {
                factors.put(i, factors.getOrDefault(i, 0) + 1);
                k /= i;
            }
        }
        if (k > 1) {
            factors.put(k, 1);
        }
        return factors;
    }
}

_______________________________________________________



Problem Statement : 
Given two positive integers n and k, determine the highest value of x such that kx divides n! (n factorial) completely (i.e., n % (kx) == 0).





Approach : 
Prime Factorization of k
Break k into its prime powers
Count how many times each prime p appears in n!
Divide total exponent in n! by exponent in k




Complexity : 
Time Complexity : O(√k + f × log n)
Space Complexity : O(f)