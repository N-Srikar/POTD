3440. Reschedule Meetings for Maximum Free Time II
________________________________________________________

class Solution {
    public int maxFreeTime(int eventTime, int[] startTime, int[] endTime) {
        int n = startTime.length;
        if (n == 0) return eventTime;

        int[] gaps = new int[n + 1];
        gaps[0] = startTime[0];

        for (int i = 1; i < n; i++) {
            gaps[i] = startTime[i] - endTime[i - 1];
        }
        gaps[n] = eventTime - endTime[n - 1];

        int[] largestRight = new int[n + 1];
        for (int i = n - 1; i >= 0; i--) {
            largestRight[i] = Math.max(largestRight[i + 1], gaps[i + 1]);
        }

        int maxFree = 0, largestLeft = 0;
        for (int i = 1; i <= n; i++) {
            int duration = endTime[i - 1] - startTime[i - 1];
            boolean canFitLeft = largestLeft >= duration;
            boolean canFitRight = largestRight[i] >= duration;

            if (canFitLeft || canFitRight) {
                int merged = gaps[i - 1] + gaps[i] + duration;
                maxFree = Math.max(maxFree, merged);
            }

            maxFree = Math.max(maxFree, gaps[i - 1] + gaps[i]);
            largestLeft = Math.max(largestLeft, gaps[i - 1]);
        }

        return maxFree;
    }
}
________________________________________________________



Problem Statement :
You are given an integer eventTime denoting the duration of an event. You are also given two integer arrays startTime and endTime, each of length n.

These represent the start and end times of n non-overlapping meetings that occur during the event between time t = 0 and time t = eventTime, where the ith meeting occurs during the time [startTime[i], endTime[i]].

You can reschedule at most one meeting by moving its start time while maintaining the same duration, such that the meetings remain non-overlapping, to maximize the longest continuous period of free time during the event.

Return the maximum amount of free time possible after rearranging the meetings.

Note that the meetings can not be rescheduled to a time outside the event and they should remain non-overlapping.

Note: In this version, it is valid for the relative ordering of the meetings to change after rescheduling one meeting.





Approach : 
Calculate all gaps between meetings including:
Before the first meeting,
Between each consecutive meeting,
After the last meeting.

Precompute the maximum gap to the right of each position to enable checking if a meeting can be rescheduled.

For each potential meeting to remove:
Calculate the combined gap if that meeting is removed.
Check if the meeting can fit into any previously seen left or upcoming right gap.

Track the maximum such free time obtained.







Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)