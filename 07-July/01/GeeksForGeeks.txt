Substrings of length k with k-1 distinct elements
________________________________________________________


class Solution {
    public int substrCount(String s, int k) {
        if (k > s.length()) return 0;

        int count = 0;
        Map<Character, Integer> freq = new HashMap<>();

        for (int i = 0; i < k; i++) {
            freq.put(s.charAt(i), freq.getOrDefault(s.charAt(i), 0) + 1);
        }
        if (freq.size() == k - 1) count++;

        for (int i = k; i < s.length(); i++) {
            char out = s.charAt(i - k);
            char in = s.charAt(i);

            // Remove outgoing character
            freq.put(out, freq.get(out) - 1);
            if (freq.get(out) == 0) freq.remove(out);

            // Add incoming character
            freq.put(in, freq.getOrDefault(in, 0) + 1);

            if (freq.size() == k - 1) count++;
        }

        return count;
    }
}

_________________________________________________________




Problem Statement : 
Given a string s consisting only lowercase alphabets and an integer k. Find the count of all substrings of length k which have exactly k-1 distinct characters.



Approach : 
Use a sliding window of size k.

Maintain a frequency map of characters in the current window.

For each window:
Check if it has exactly k-1 distinct characters.
If yes, increase the count.

Slide the window by removing the leftmost character and adding the next one.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(k)