Max Circular Subarray Sum
_________________________________________________________

class Solution {
    public int maxCircularSum(int arr[]) {
        int totalSum = 0;
        int maxSum = arr[0];
        int curMax = 0;
        int minSum = arr[0];
        int curMin = 0;

        for (int num : arr) {
            curMax = Math.max(num, curMax + num);
            maxSum = Math.max(maxSum, curMax);

            curMin = Math.min(num, curMin + num);
            minSum = Math.min(minSum, curMin);

            totalSum += num;
        }

        if (maxSum < 0) return maxSum;  // all elements are negative
        return Math.max(maxSum, totalSum - minSum);
    }
}

_________________________________________________________




Problem Statement :
You are given a circular array arr[] of integers, find the maximum possible sum of a non-empty subarray. In a circular array, the subarray can start at the end and wrap around to the beginning. Return the maximum non-empty subarray sum, considering both non-wrapping and wrapping cases.




Approach : 
Kadane's for Max Subarray Sum:
curMax = max(num, curMax + num)
Keep track of maxSum

Kadane's for Min Subarray Sum:
curMin = min(num, curMin + num)
Keep track of minSum
Calculate total array sum.

Return:
If all numbers are negative: return maxSum
Else: max(maxSum, totalSum - minSum)





Complexity : 
Time Complexity : O(n)
Space Complexity : O(1)