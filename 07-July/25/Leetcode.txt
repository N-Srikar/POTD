3487. Maximum Unique Subarray Sum After Deletion
________________________________________________________

class Solution {
    public int maxSum(int[] nums) {
        int sum = 0;
        Set<Integer> st = new HashSet<>();
        int mxNeg = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > 0)
                st.add(nums[i]);
            else
                mxNeg = Math.max(mxNeg, nums[i]);
        }
        for (int val : st) {
            sum += val;
        }
        if (st.size() > 0)
            return sum;
        else
            return mxNeg;
    }
}
________________________________________________________




Problem Statement :
You are given an integer array nums.

You are allowed to delete any number of elements from nums without making it empty. After performing the deletions, select a subarray of nums such that:

All elements in the subarray are unique.
The sum of the elements in the subarray is maximized.
Return the maximum sum of such a subarray.






Approach :
Traverse through the array and store positive numbers in a set (which ensures uniqueness).
Keep track of the maximum negative number in case there are no positive numbers.
The result will either be the sum of unique positive numbers or the largest negative number.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)