Next Greater Element in Circular Array
_______________________________________________________

class Solution {
    public ArrayList<Integer> nextLargerElement(int[] arr) {
        int n = arr.length;
        ArrayList<Integer> result = new ArrayList<>(Collections.nCopies(n, -1));
        Stack<Integer> stack = new Stack<>();

        // Traverse the array twice (simulate circular array)
        for (int i = 2 * n - 1; i >= 0; i--) {
            int index = i % n;

            // Pop all elements smaller than or equal to current
            while (!stack.isEmpty() && stack.peek() <= arr[index]) {
                stack.pop();
            }

            // If we are in the first pass, update result
            if (i < n) {
                if (!stack.isEmpty()) {
                    result.set(index, stack.peek());
                }
            }

            // Push current element
            stack.push(arr[index]);
        }

        return result;
    }
}

_______________________________________________________




Problem Statement : 
Given a circular integer array arr[], the task is to determine the next greater element (NGE) for each element in the array.

The next greater element of an element arr[i] is the first element that is greater than arr[i] when traversing circularly. If no such element exists, return -1 for that position.

Circular Property:
Since the array is circular, after reaching the last element, the search continues from the beginning until we have looked at all elements once.





Approach : 
Simulate circular behavior by iterating the array twice (2 × n), from right to left.

Use a stack to keep track of elements for which we’re finding the next greater element.

For each element (considered as arr[i % n]), pop elements from the stack that are less than or equal to it.

The top of the stack (if not empty) is the next greater element.

Push the current element to the stack after processing.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)