Maximum sum of elements not part of LIS
________________________________________________________

class Solution {
    public int nonLisMaxSum(int[] arr) {
        int n = arr.length;
        if (n == 0) return 0;

        // 1. total sum of all elements
        int totalSum = 0;
        for (int x : arr) totalSum += x;

        // 2. dp[i] = length of LIS ending at i
        //    sum[i] = **minimum** sum of any LIS of that length ending at i
        int[] dp  = new int[n];
        int[] sum = new int[n];

        int maxLen = 0;
        // we'll track the **minimum** LIS-sum among all subsequences of length maxLen
        int bestLisSum = Integer.MAX_VALUE;

        for (int i = 0; i < n; i++) {
            dp[i]  = 1;
            sum[i] = arr[i];

            for (int j = 0; j < i; j++) {
                if (arr[j] < arr[i]) {
                    if (dp[j] + 1 > dp[i]) {
                        dp[i]  = dp[j] + 1;
                        sum[i] = sum[j] + arr[i];
                    }
                    else if (dp[j] + 1 == dp[i]) {
                        // pick the smaller-sum LIS to maximize non-LIS sum later
                        sum[i] = Math.min(sum[i], sum[j] + arr[i]);
                    }
                }
            }

            if (dp[i] > maxLen) {
                maxLen     = dp[i];
                bestLisSum = sum[i];
            }
            else if (dp[i] == maxLen) {
                bestLisSum = Math.min(bestLisSum, sum[i]);
            }
        }

        // 3. answer = totalSum âˆ’ (sum of one LIS of length maxLen with minimum sum)
        return totalSum - bestLisSum;
    }
}

________________________________________________________





Problem Statement : 
Given an array arr[] of positive integers, your task is to find the maximum possible sum of all elements that are not part of the Longest Increasing Subsequence (LIS).





Approach : 
Calculate total sum of all elements in the array.

Initialize two arrays:
dp[i]: Length of Longest Increasing Subsequence (LIS) ending at index i.
sum[i]: Minimum sum of any such LIS ending at i.

Build the LIS information using nested loops:
For each index i:
Set base values: dp[i] = 1, sum[i] = arr[i].

For all previous indices j < i where arr[j] < arr[i]:
If dp[j] + 1 > dp[i], update to longer LIS and its sum.
If dp[j] + 1 == dp[i], choose the smaller sum.

Track the LIS with maximum length and minimum possible sum.
Among all LIS of maximum length, pick the one with the smallest sum.

Return the result:
totalSum - bestLisSum, i.e., the sum of elements not in the selected LIS





Complexity :
Time Complexity : O(n^2)
Space Complexity : O(n)