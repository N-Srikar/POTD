1695. Maximum Erasure Value
_________________________________________________________

class Solution {
    public int maximumUniqueSubarray(int[] nums) {        
        int maxScore = 0, currScore = 0;
        Set<Integer> set = new HashSet<>();

        for (int l=0, r=0; r<nums.length; r++) {
            while (!set.add(nums[r])) {
                currScore -= nums[l];
                set.remove(nums[l++]);
            }
            currScore += nums[r];
            maxScore = Math.max(maxScore, currScore);
        }
        return maxScore;
    }
}
_________________________________________________________



Problem Statement : 
You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).





Approach : 
Initialize Variables:
set: to store unique elements in the current window.
l = 0: left pointer.
currScore = 0: current sum of the window.
maxScore = 0: maximum sum found.

Expand Right Pointer (r):
Iterate through nums with r.

Handle Duplicates:
While nums[r] is already in set:
Subtract nums[l] from currScore.
Remove nums[l] from set.
Increment l.

Add New Element:
Add nums[r] to set.
Add nums[r] to currScore.

Update Maximum:
Set maxScore = max(maxScore, currScore).

Return Result:
After the loop, return maxScore.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(m)