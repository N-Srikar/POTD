Smallest Positive Missing
_________________________________________________________

class Solution {
    public int missingNumber(int[] arr) {
        int n = arr.length;

        for (int i = 0; i < n; i++) {
            // Place arr[i] to its correct position if it's in range [1, n]
            while (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i]) {
                // Swap arr[i] and arr[arr[i] - 1]
                int temp = arr[i];
                arr[i] = arr[temp - 1];
                arr[temp - 1] = temp;
            }
        }

        // Find the first index where the value is not index + 1
        for (int i = 0; i < n; i++) {
            if (arr[i] != i + 1) {
                return i + 1;
            }
        }

        return n + 1; // All numbers 1..n are present
    }
}

_________________________________________________________




Problem Statement :
You are given an integer array arr[]. Your task is to find the smallest positive number missing from the array.

Note: Positive number starts from 1. The array can have negative integers too.





Approach :
Iterate through the array:
While the current element is in range and not already at its correct index, swap it with the element at its target index.

After rearrangement, scan the array:
The first index i where arr[i] != i+1 is the missing number.

If all positions are correct, the missing number is n+1.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(1)