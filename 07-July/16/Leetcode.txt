3201. Find the Maximum Length of Valid Subsequence I
________________________________________________________

class Solution {
    public int maximumLength(int[] nums) {
        int c = nums[0] % 2, odd = 0, even = 0, both = 0;
        for (int num : nums) {
            if (num % 2 == 0) {
                even++;
            } else {
                odd++;
            }
            if (num % 2 == c) {
                both++;
                c = 1 - c;  // Toggle the parity
            }
        }
        return Math.max(both, Math.max(even, odd));
    }
}
________________________________________________________





Problem Statement :
You are given an integer array nums.

A subsequence sub of nums with length x is called valid if it satisfies:
(sub[0] + sub[1]) % 2 == (sub[1] + sub[2]) % 2 == ... == (sub[x - 2] + sub[x - 1]) % 2.

Return the length of the longest valid subsequence of nums.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.






Approach : 
Initialize Counters:
odd: Counts the number of odd elements in the array.
even: Counts the number of even elements in the array.
both: Counts the number of elements in a subsequence where the parity alternates between consecutive elements.

Iterate Through the Array:
Track the parity of the current element using num % 2.
Update the odd or even counter based on the parity of the current element.
Update the both counter to keep track of alternating parity. This involves toggling the expected parity (c) after each element that matches the current expected parity.

Return the Maximum Count:
The length of the longest valid subsequence is the maximum of the three counters (odd, even, and both).






Complexity :
Time Complexity : O(n)
Space Complexity : O(1)