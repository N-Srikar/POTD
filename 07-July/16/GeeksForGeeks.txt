Nine Divisors
__________________________________________________________

class Solution {
    public static int countNumbers(int n) {
        // Step 1: Generate primes up to sqrt(n)
        int limit = (int)Math.sqrt(n) + 1;
        boolean[] isPrime = new boolean[limit + 1];
        Arrays.fill(isPrime, true);
        isPrime[0] = isPrime[1] = false;

        for (int i = 2; i * i <= limit; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j <= limit; j += i)
                    isPrime[j] = false;
            }
        }

        List<Integer> primes = new ArrayList<>();
        for (int i = 2; i <= limit; i++) {
            if (isPrime[i]) primes.add(i);
        }

        int count = 0;

        // Step 2: Count numbers of the form p^8
        for (int p : primes) {
            long pow = (long) Math.pow(p, 8);
            if (pow <= n) count++;
            else break;
        }

        // Step 3: Count numbers of the form p^2 * q^2
        int size = primes.size();
        for (int i = 0; i < size; i++) {
            long p2 = (long) primes.get(i) * primes.get(i);
            for (int j = i + 1; j < size; j++) {
                long q2 = (long) primes.get(j) * primes.get(j);
                if (p2 * q2 <= n) count++;
                else break;
            }
        }

        return count;
    }
}

__________________________________________________________


Problem Statement :
Given a positive integer n, you need to count the numbers less than or equal to n having exactly 9 divisors.






Approach : 
Generate all prime numbers up to sqrt(n) using Sieve of Eratosthenes.
For each prime p, check if p^8 ≤ n → count it.
For each pair of distinct primes p, q, check if p^2 * q^2 ≤ n → count it.






Complexity :
Time Complexity : O(n log log n)
Space Complexity : O(sqrt(n))