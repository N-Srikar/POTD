Last Moment Before All Ants Fall Out
___________________________________________________________

class Solution {
    public int getLastMoment(int n, int[] left, int[] right) {
        int maxLeft = 0;
        for (int pos : left) {
            maxLeft = Math.max(maxLeft, pos);
        }
        
        int maxRight = 0;
        for (int pos : right) {
            maxRight = Math.max(maxRight, n - pos);
        }
        
        return Math.max(maxLeft, maxRight);
    }
}
___________________________________________________________




Problem Statement :
We have a wooden plank of length n units. Some ants are walking on the plank, each ant moves with a speed of 1 unit per second, with some moving left and others right.
When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time. When an ant reaches one end of the plank at a time t, it falls out of the plank immediately.

Given an integer n and two integer arrays left[] and right[], the positions of the ants moving to the left and the right, return the time when the last ant(s) fall out of the plank.




Approach : 
For all pos in left[], find max(pos) — takes pos seconds to fall.
For all pos in right[], find max(n - pos) — takes n - pos seconds to fall.
The answer is the maximum of both values.




Complexity : 
Time Complexity : O(L + R)
Space Complexity : O(1)