Sum of subarray minimum
________________________________________________________

class Solution {
    public int sumSubMins(int[] arr) {
        int n = arr.length;
        int MOD = (int)1e9 + 7;
        int[] prevLess = new int[n];
        int[] nextLess = new int[n];

        Stack<Integer> stack = new Stack<>();

        // Step 1: Previous Less Element
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }
            prevLess[i] = stack.isEmpty() ? i + 1 : i - stack.peek();
            stack.push(i);
        }

        // Clear stack to reuse for next less
        stack.clear();

        // Step 2: Next Less Element
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            nextLess[i] = stack.isEmpty() ? n - i : stack.peek() - i;
            stack.push(i);
        }

        // Step 3: Calculate sum of contributions
        long result = 0;
        for (int i = 0; i < n; i++) {
            long contrib = (long) arr[i] * prevLess[i] * nextLess[i];
            result = (result + contrib) % MOD;
        }

        return (int) result;
    }
}

________________________________________________________




Problem Statement : 
Given an array arr[] of positive integers, find the total sum of the minimum elements of every possible subarrays.

Note: It is guaranteed that the total sum will fit within a 32-bit unsigned integer.






Approach : 
For each element, find how many elements to the left are greater (PLE).

For each element, find how many elements to the right are greater or equal (NLE).

For each element, compute its contribution to the total sum using:
arr[i] * PLE[i] * NLE[i].

Sum up all contributions.






Complexity : 
Time Complexity : O(n)
Space Complexity ; O(n)