1751. Maximum Number of Events That Can Be Attended II
_______________________________________________________

class Solution {
    public int maxValue(int[][] events, int k) {
        Arrays.sort(events, (e1, e2) -> (e1[0] == e2[0] ? e1[1]-e2[1] : e1[0]-e2[0]));
        return maxValue(events, 0, k, 0, new int[k+1][events.length]);
    }
    
    private int maxValue(int[][] events, int index, int remainingEvents, int lastEventEndDay, int[][] dp) {
		// Return 0 if no events are left or maximum choice is reached
		if (index >= events.length || remainingEvents == 0)
            return 0;
			
        // An Event cannot be picked if the previous event has not completed before current event
        if (lastEventEndDay >= events[index][0])
            return maxValue(events, index+1, remainingEvents, lastEventEndDay, dp);
        
		// Return the value if the solution is already available
        if (dp[remainingEvents][index] != 0)
            return dp[remainingEvents][index];
                
		// There are 2 choices that we can make,
			// SKIP this meeting or PICK this meeting
        return dp[remainingEvents][index] = Math.max(
            maxValue(events, index+1, remainingEvents, lastEventEndDay, dp), // skip
            maxValue(events, index+1, remainingEvents-1, events[index][1], dp) + events[index][2] // pick
        );
    }
}
_______________________________________________________




Problem Statement : 
You are given an array of events where events[i] = [startDayi, endDayi, valuei]. The ith event starts at startDayi and ends at endDayi, and if you attend this event, you will receive a value of valuei. You are also given an integer k which represents the maximum number of events you can attend.

You can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.

Return the maximum sum of values that you can receive by attending events.






Approach :
Sort the events in ascending order

While iterating each event we can make two choices based on the conditions
We can skip the meeting
we can pick the meeting if the previous meeting has ended before the current meeting start time

This solution will take expotential time but using dynamic programming this can be solved by remembering the previous solution at indexes





Complexity : 
Time Complexity : O(n * logn)
Space Complexity : O(n * k)