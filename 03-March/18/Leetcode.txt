2401. Longest Nice Subarray
_______________________________________________________

class Solution {
    public int longestNiceSubarray(int[] nums) {
        int used = 0, j = 0, res = 0;
        for (int i = 0; i < nums.length; ++i) {
            while ((used & nums[i]) != 0)
                used ^= nums[j++];
            used |= nums[i];
            res = Math.max(res, i - j + 1);
        }
        return res;    
    }
}
________________________________________________________

Problem Statement:
We need to find the longest nice subarray in an array nums. A subarray is called nice if the bitwise AND of every pair of elements is 0.

Intuition: each element in the nice array has unique bits.

Approach: (Sliding window)
We use the sliding window approach, tracking used bits. 
We use OR to combine bits.

If the next number has a conflicting bit (used & nums[i] != 0), 
we shrink the window until there are no conflicts. 
We use XOR to remove bits as the window shrinks.

Complexity:
Time Complexity: O(n)
Space Complexity: O(1)