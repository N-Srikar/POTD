2529. Maximum Count of Positive Integer and Negative Integer

________________________________________________________

class Solution {
    public int maximumCount(int[] arr) {
        int i=0;
        int j=arr.length-1;
        int right=0 , left=0;
        while(i<=j){
            int mid=(i+j)/2;
            if(arr[mid]>0)  j=mid-1;
            else if(arr[mid]<=0) i=mid+1;
        }
        right=arr.length-i;

        i=0;
        j=arr.length-1;
        while(i<=j){
            int mid=(i+j)/2;
            if(arr[mid]>=0)  j=mid-1;
            else if(arr[mid]<0) i=mid+1;
        }
        left=i;
        
        return Math.max(left,right);
    }
}

_____________________________________________________

Problem Statement
You are given a sorted (non-decreasing) array nums. Your task is to return the maximum count between:

The number of positive integers
The number of negative integers
⚠ Note: Zero (0) is not counted as positive or negative.

Approach
Since the array is sorted, we can efficiently count negative and positive numbers using binary search instead of iterating through the entire array.

Key Observations
All negative numbers appear before 0 (if present).
All positive numbers appear after 0 (if present).
Using binary search, we can efficiently find the boundaries where
The first positive number appears.
The last negative number appears.

Binary Search Strategy
We perform two binary searches:
Find the first positive number → This gives right (count of positive numbers).
Find the first non-negative number (≥ 0) → This gives left (count of negative numbers).

Binary Search for First Positive Number
We find the smallest index where arr[mid] > 0.
The count of positive numbers is arr.length - i.

Binary Search for First Non-Negative Number
We find the smallest index where arr[mid] >= 0.
The count of negative numbers is i.

Complexity analysis
Time complexity - O(logN)
Space complexity - O(1)