2161. Partition Array According to Given Pivot
_______________________________________________________

class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
        int[] result = new int[nums.length];
        int left = 0, right = nums.length - 1;
        
        for (int i = 0, j = nums.length - 1; i < nums.length; i++, j--) {
            if (nums[i] < pivot) {
                result[left] = nums[i];
                left++;
            }
            
            if (nums[j] > pivot) {
                result[right] = nums[j];
                right--;
            }
        }
        
        while (left <= right) {
            result[left] = pivot;
            left++;
        }
        
        return result;
    }
}

______________________________________________________




Problem Statement :
You are given a 0-indexed integer array nums and an integer pivot. Rearrange nums such that the following conditions are satisfied:

Every element less than pivot appears before every element greater than pivot.
Every element equal to pivot appears in between the elements less than and greater than pivot.
The relative order of the elements less than pivot and the elements greater than pivot is maintained.
More formally, consider every pi, pj where pi is the new position of the ith element and pj is the new position of the jth element. If i < j and both elements are smaller (or larger) than pivot, then pi < pj.
Return nums after the rearrangement.




Approach :
Initialize a result[] array of the same size.

Use two pointers:
left → starts from beginning: to fill values < pivot
right → starts from end: to fill values > pivot

In a single loop:
If nums[i] < pivot, place it at result[left++].
If nums[j] > pivot, place it at result[right--].
This happens simultaneously using both i and j in one pass.

After the loop, fill the remaining middle part (from left to right) with the pivot value.






Complexity :
Time Complexity : O(n)
Space Complexity : O(n)