Minimum Jumps
_______________________________________________________

class Solution {
    static int minJumps(int[] arr) {
        // code here
        int n = arr.length;
        if (n <= 1) {
            return 0; 
        }
        
        if (arr[0] == 0) {
            return -1;
        }
        
        int maxReach = arr[0]; 
        int steps = arr[0];   
        int jumps = 1;  
        
        for (int i = 1; i < n; i++) {
            if (i == n - 1) {
                return jumps;
                
            }
            
            maxReach = Math.max(maxReach, i + arr[i]); 
            
            steps--; 
            
            if (steps == 0) {
                jumps++; 
                
                if (i >= maxReach) {
                    return -1; 
                }
                
                steps = maxReach - i; 
            }
        }
        
        return -1;
    }
}
______________________________________________________

Problem Statement:
You are given an array arr[] where each element represents the maximum number of steps you can jump forward from that index.

Goal: 
Find the minimum number of jumps required to reach the last index of the array.

Constraints:
If arr[i] = 0, you cannot jump forward from that position.
If it's impossible to reach the last index, return -1.


Approach (Greedy Algorithm):
We use a greedy approach with three key variables:

maxReach → The farthest index we can reach from any previous jump.
steps → The remaining steps we can still take from the current jump.
jumps → The total number of jumps made so far.

Steps:
Edge Cases:
If the array has only one element (n == 1), we are already at the last index → return 0.
If the first element is 0, we cannot move anywhere → return -1.

Traverse the Array:
Keep updating maxReach (the farthest position we can jump to).
Decrease steps as we move forward.
When steps == 0, it means we need a new jump to continue moving forward:
Increase jumps.
If i >= maxReach, it's impossible to proceed → return -1.
Recalculate steps based on maxReach.
If we reach the last index: return jumps.

Complexity:
Time Complexity : O(N)
Space Complexity : O(!)