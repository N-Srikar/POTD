3394. Check if Grid can be Cut into Sections
________________________________________________________

class Solution {
        public boolean checkValidCuts(int n, int[][] rectangles) {
        int[][] X = new int[rectangles.length][2];
        int[][] Y = new int[rectangles.length][2];
        for (int i = 0; i < rectangles.length; i++) {
            X[i][0] = rectangles[i][0];
            Y[i][0] = rectangles[i][1];
            X[i][1] = rectangles[i][2];
            Y[i][1] = rectangles[i][3];
        }
        return check(X) || check(Y);
    }

    private boolean check(int[][] A) {
        int res = 0;
        Arrays.sort(A, (a, b) -> Integer.compare(a[0], b[0]));
        int pre = A[0][1];
        for (int[] ab : A) {
            int a = ab[0], b = ab[1];
            if (pre <= a) {
                res++;
            }
            pre = Math.max(pre, b);
        }
        return res > 1;
    }
}
_________________________________________________________


Problem Statement :
You are given an integer n representing the dimensions of an n x n grid, with the origin at the bottom-left corner of the grid. You are also given a 2D array of coordinates rectangles, where rectangles[i] is in the form [startx, starty, endx, endy], representing a rectangle on the grid. Each rectangle is defined as follows:

(startx, starty): The bottom-left corner of the rectangle.
(endx, endy): The top-right corner of the rectangle.
Note that the rectangles do not overlap. Your task is to determine if it is possible to make either two horizontal or two vertical cuts on the grid such that:

Each of the three resulting sections formed by the cuts contains at least one rectangle.
Every rectangle belongs to exactly one section.
Return true if such cuts can be made; otherwise, return false.



Approach:
Extract intervals from rectangles:
X-intervals for vertical cuts [x1, x2].
Y-intervals for horizontal cuts [y1, y2].

Sort the intervals by their start points.

Merge overlapping intervals while tracking the farthest endpoint max_end.

If a new interval starts after max_end, increment sections (indicating separation).
If sections â‰¥ 2, return True.

Apply this check to both X and Y intervals and return True if either succeeds.



Complexity :
Time complexity : O(n log n)
Space complexity : O(n)