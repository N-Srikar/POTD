Stickler Thief II
_______________________________________________________

class Solution {
    int maxValue(int[] arr) {
        int n = arr.length;
        if (n == 1) return arr[0]; // If there's only one house, return its value.

        return Math.max(rob(arr, 0, n - 2), rob(arr, 1, n - 1));
    }

    private int rob(int[] arr, int start, int end) {
        int prev1 = 0, prev2 = 0;
        for (int i = start; i <= end; i++) {
            int curr = Math.max(prev2, prev1 + arr[i]);
            prev1 = prev2;
            prev2 = curr;
        }
        return prev2;
    }
}
_______________________________________________________

Problem Statement:
You are given an array arr[] which represents houses arranged in a circle, where each house has a certain value. A thief aims to maximize the total stolen value without robbing two adjacent houses.
Determine the maximum amount the thief can steal.

Note: Since the houses are in a circle, the first and last houses are also considered adjacent.

Approach:
Transform the problem into two linear House Robber problems

Since the first and last house are adjacent, we have two choices:
Consider houses from index 0 to n-2 (excluding the last house).
Consider houses from index 1 to n-1 (excluding the first house).
Solve the House Robber I problem for both cases and take the maximum result.

House Robber I Dynamic Programming Approach
We maintain two variables:
prev1 (maximum sum excluding the current house).
prev2 (maximum sum including the current house).
We iterate over the array and update prev2 accordingly.


Complexity:
Time Complexity: O(n).
Space Complexity: O(1)

