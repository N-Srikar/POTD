0 - 1 Knapsack Problem

_______________________________________________________

class Solution {
    static int[][] memo;

    static int knapsack(int W, int val[], int wt[]) {
        int n=val.length;
        memo = new int[n + 1][W + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= W; j++) {
                memo[i][j] = -1;
            }
        }
        return solve(W , val , wt , n);
    }

    static int solve(int W, int val[], int wt[], int n) {
        if (n == 0 || W == 0) {
            return 0;
        }
        if (memo[n][W] != -1) {
            return memo[n][W];
        }

        if (wt[n - 1] > W) {
            memo[n][W] = solve(W , val , wt , n-1);
        } 
        else {
            int include = val[n - 1] + solve(W - wt[n - 1] , val , wt , n - 1);
            int exclude = solve(W, val, wt, n - 1);
            memo[n][W] = Math.max(include, exclude);
        }

        return memo[n][W];
    }
}

_______________________________________________________

Problem statement:
The 0-1 Knapsack problem is a classic Dynamic Programming (DP) problem where we need to select items such that:

The total weight does not exceed the given capacity W.
The total value is maximized.
We cannot take a fraction of an itemâ€”each item is either fully included or excluded.


Approach:
This is a classic DP problem solved using recursion + memoization. The main idea is:

For each item, we have two choices:
Include the item if its weight allows.
Exclude the item.
The optimal answer is the maximum of these two choices.
Use memoization to avoid redundant calculations.


Time Complexity:
Recursive (Exponential) O(2^n)
DP with Memoization O(nW)