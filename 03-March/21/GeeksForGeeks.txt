Stickler Thief
________________________________________________________

class Solution {
    public int findMaxSum(int arr[]) {
        int n = arr.length;
        
        // If there are no houses, no loot can be done
        if (n == 0) return 0;
        
        // If there is only one house, loot that house
        if (n == 1) return arr[0];
        
        // DP array to store the maximum loot up to each house
        int[] dp = new int[n];
        
        // Base cases
        dp[0] = arr[0];  // Only one house, loot it
        dp[1] = Math.max(arr[0], arr[1]);  // Choose the maximum between the first two houses
        
        // Fill the DP array using the recurrence relation
        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i-1], arr[i] + dp[i-2]);
        }
        
        // The last element of dp array holds the maximum loot possible
        return dp[n-1];
    }
}

____________________________________________________

Problem Statement:
Stickler the thief wants to loot money from the houses arranged in a line. He cannot loot two consecutive houses and aims to maximize his total loot.
Given an array, arr[] where arr[i] represents the amount of money in the i-th house.
Determine the maximum amount he can loot.

Approach:
If you loot a house at index i, you cannot loot the house at index i-1 or i+1. This means you have two choices at every house:
Either loot the current house and add its value to the sum from house i-2 (i.e., arr[i] + dp[i-2]).
Or skip the current house and keep the sum from house i-1 (i.e., dp[i-1]).
We can define a DP array dp[i], where dp[i] represents the maximum sum you can loot from house 0 to house i.

The recurrence relation is: dp[i]=max(dp[i−1],arr[i]+dp[i−2])
Where:
dp[i-1] is the maximum loot if we skip the current house.
arr[i] + dp[i-2] is the maximum loot if we loot the current house.

Base cases:
dp[0] = arr[0] (only one house to loot).
dp[1] = max(arr[0], arr[1]) (choose the maximum of the first two houses).

Steps:
Initialize a DP array to store the maximum loot up to each house.
Iteratively compute the maximum loot for each house from index 2 to n-1 using the recurrence relation.
The result will be in dp[n-1] (the last element of the DP array).