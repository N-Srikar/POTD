Word Break
_______________________________________________________

class Solution {
    public boolean wordBreak(String s, String[] dictionary) {
        HashSet<String> dictSet = new HashSet<>();
        for (String word : dictionary) {
            dictSet.add(word);
        }

        int n = s.length();
        boolean[] dp = new boolean[n + 1];
        dp[0] = true;

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && dictSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[n];
    }
}


_________________________________________________________

Problem Statement :
You are given a string s and a list dictionary[] of words. Your task is to determine whether the string s can be formed by concatenating one or more words from the dictionary[].

Note: From dictionary[], any word can be taken any number of times and in any order.



Approach:
This problem can be solved using Dynamic Programming (DP).

Define a DP array:
Let dp[i] be true if the substring s[0..i-1] can be segmented using words from the dictionary.
Initialize dp[0] = true, since an empty string can always be segmented.

Convert dictionary to a HashSet:
Searching in a HashSet is O(1) on average, making word lookup efficient.

Iterate over the string:
For each position i, check all possible previous positions j (0 <= j < i).
If dp[j] is true and s[j..i-1] is present in the dictionary, mark dp[i] = true.
Return dp[n], where n is the length of s.


Complexity :
Time Complexity : O(n^2) 
Space Complexity : O(n+m) 
