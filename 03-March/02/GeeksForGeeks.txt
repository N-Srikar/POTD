K Sized Subarray Maximum
_______________________________________________________

class Solution {
    static ArrayList<Integer> maxOfSubarrays(int[] arr, int k) {
        ArrayList<Integer> result = new ArrayList<>();
        Deque<Integer> dq = new ArrayDeque<>();

        for (int i = 0; i < arr.length; i++) {
            // Remove elements from the back that are smaller than the current element
            while (!dq.isEmpty() && arr[dq.peekLast()] <= arr[i]) {
                dq.pollLast();
            }

            // Add current index
            dq.offerLast(i);

            // Remove elements out of the current window
            if (dq.peekFirst() <= i - k) {
                dq.pollFirst();
            }

            // Add the maximum to result (front of deque)
            if (i >= k - 1) {
                result.add(arr[dq.peekFirst()]);
            }
        }

        return result;
    }
}

_______________________________________________________




Problem Statement : 
Given an array arr[] of integers and an integer k, your task is to find the maximum value for each contiguous subarray of size k. The output should be an array of maximum values corresponding to each contiguous subarray.



Approach :
Use a Deque dq to store indices of array elements.

The Deque will always maintain elements in decreasing order of their values.

For every index i:
Remove indices from the back if arr[i] is greater than elements at those indices.
Add i to the Deque.
Remove the front index if it's out of the current window (i - k).
If i >= k - 1, the element at the front of the deque is the max of the current window.





Complexity :
Time Complexity : O(n)
Space Complexity : O(k)