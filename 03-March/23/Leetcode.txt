1976. Number of Ways to Arrive at Destination
_______________________________________________________

class Pair{
   long first;
    int second;
    Pair(long _first,int _second){
        this.first=_first;
        this.second=_second;
    }
}
class Solution {
    public int countPaths(int n, int[][] roads) {
        ArrayList<ArrayList<Pair>>adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        int m = roads.length;
        for (int i = 0; i < m; i++) {
            int u = roads[i][0];
            int v = roads[i][1];
            int w = roads[i][2];

            if (u >= n || v >= n) continue;  

            adj.get(u).add(new Pair(w, v)); 
            adj.get(v).add(new Pair(w, u));
        }
        PriorityQueue<Pair> q = new PriorityQueue<>(Comparator.comparingLong(x -> x.first));
        
        long[] dist=new long[n];
        int[] ways=new int[n];
        Arrays.fill(dist, Long.MAX_VALUE);
        Arrays.fill(ways, 0); 
        dist[0]=0;
        ways[0]=1;
        q.add(new Pair(0,0));
        int mod=(int)(1e9+7);

        while(!q.isEmpty()){
            long dis=q.peek().first;
            int node=q.peek().second;
            q.remove();
                        if (dis > dist[node]) continue; // Skip outdated entries

            for(Pair it:adj.get(node)){
                int adjNode=it.second;
                long edW=it.first;

                if(dis+edW<dist[adjNode]){
                    dist[adjNode]=dis+edW;
                    q.add(new Pair(dis+edW,adjNode));
                    ways[adjNode]=ways[node];
                }
                else if(dis+edW==dist[adjNode]){
                    ways[adjNode]=(ways[node]+ways[adjNode])%mod;
                }
            }
        }
        return ways[n-1]%mod;
    }
}

_______________________________________________________


Problem Statement :
You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.

You are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.

Return the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 109 + 7.



Approach :
Graph Representation:
The city is modeled as an undirected weighted graph where:
Nodes are intersections.
Edges represent roads with weights (time to travel).
An adjacency list (adj) is used to store edges as Pair(weight, destination).

Dijkstraâ€™s Algorithm:
Finds the shortest path from node 0 to all other nodes using a priority queue (min-heap).
The priority queue stores pairs (current shortest distance, node).
The queue processes nodes in increasing order of distance.

Path Counting Using DP:
An array ways[] is used to count the number of ways to reach each node using the shortest time.
If a new shorter path to a node is found, we update dist[] and reset ways[] for that node.
If another path with the same shortest distance is found, we add the number of ways.


Complexity :
Time Complexity : O((E+V)logV)
Space Complexity :  O(V+E)