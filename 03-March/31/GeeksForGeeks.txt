Maximize partitions in a String
________________________________________________________

class Solution {
    public int maxPartitions(String s) {
        Map<Character, Integer> map = new HashMap<>();

        // Store last occurrence index of each character
        for (int i = 0; i < s.length(); i++) {
            map.put(s.charAt(i), i);
        }

        int partitions = 0;
        int prev = -1, max = 0;

        // Traverse the string and count partitions
        for (int i = 0; i < s.length(); i++) {
            max = Math.max(max, map.get(s.charAt(i)));
            if (max == i) {
                partitions++;
                prev = max;
            }
        }
        return partitions;
    }
}

_______________________________________________________

Problem Statement :
Given a string s of lowercase English alphabets, your task is to return the maximum number of substrings formed, after possible partitions (probably zero) of s such that no two substrings have a common character.



Approach :
Step 1: Store the Last Occurrence of Each Character
First, we traverse the string and store the last index where each character appears in a HashMap.
This helps us determine how far each character extends in the string


Step 2: Traverse and Determine Partitions
As we iterate through the string, we track the maximum last occurrence (max) of any character seen so far.
If our current index reaches max, it means that the current partition can end here.



Complexity :
Time Complexity : O(N)
Space Complexity : O(1)