BFS of graph
_______________________________________________________

class Solution {
    // Function to return Breadth First Search Traversal of the given graph.
    public ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> result = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[adj.size()];

        queue.add(0);
        visited[0] = true;

        while (!queue.isEmpty()) {
            int node = queue.poll();
            result.add(node);

            for (int neighbor : adj.get(node)) {
                if (!visited[neighbor]) {
                    queue.add(neighbor);
                    visited[neighbor] = true;
                }
            }
        }
        return result;
    }
}


________________________________________________________

Problem Statement :
Given a connected undirected graph containing V vertices, represented by a 2-d adjacency list adj[][], where each adj[i] represents the list of vertices connected to vertex i. Perform a Breadth First Search (BFS) traversal starting from vertex 0, visiting vertices from left to right according to the given adjacency list, and return a list containing the BFS traversal of the graph.


Approach :
Use a Queue: BFS uses a queue to explore nodes level by level.
Track Visited Nodes: Use a boolean array to mark visited nodes.
Start from Node 0: Enqueue it and mark it as visited.
Explore Adjacent Nodes: Dequeue a node, visit all its unvisited neighbors, and enqueue them.
Repeat Until Queue is Empty.

Complexity : 
Time Complexity : O(V+E)
Space Complexity : O(V)