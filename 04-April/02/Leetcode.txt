2873. Maximum Value of an Ordered Triplet I
________________________________________________________
class Solution {
    public long maximumTripletValue(int[] nums) {
        long maxTriplet = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int k = nums.length - 1; k > i; k--) {
                int j = i + 1;
                while (j < k) {
                    maxTriplet = Math.max(maxTriplet, (long)(nums[i] - nums[j]) * nums[k]);
                    j++;
                }
            }
        }
        return Math.max(0, maxTriplet);
    }
}


public long maximumTripletValue(int[] A) {
        long res = 0, maxa = 0, maxab = 0;
        for (int a : A) {
            res = Math.max(res, 1L * maxab * a);
            maxab = Math.max(maxab, maxa - a);
            maxa = Math.max(maxa, a);
        }
	return res;
}

_______________________________________________________



Problem Statement : 
You are given a 0-indexed integer array nums.
Return the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.
The value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].



Approach :
Brute force 
This is the simplest approach using 3 nested loops and traversing through all possible triplets.

Optimal 
For each a in A,
we update several values
res is the maximum value of a triplet (A[i] - A[j]) * A[k].
maxab is the maximum value of pair A[i] - A[j]
maxa is the maximum value of element A[i].


Complexity :
Time Complexity : O(n)
Space Complexity : O(1)