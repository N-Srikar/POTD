Implement Trie
________________________________________________________

class Trie {
    private class TrieNode {
        TrieNode[] children = new TrieNode[26];
        boolean isEndOfWord = false;
    }

    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Insert a word into the Trie
    public void insert(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            int idx = c - 'a';
            if (node.children[idx] == null) {
                node.children[idx] = new TrieNode();
            }
            node = node.children[idx];
        }
        node.isEndOfWord = true;
    }

    // Search for a word in the Trie
    public boolean search(String word) {
        TrieNode node = root;
        for (char c : word.toCharArray()) {
            int idx = c - 'a';
            if (node.children[idx] == null) return false;
            node = node.children[idx];
        }
        return node.isEndOfWord;
    }

    // Check if a prefix exists in the Trie
    public boolean isPrefix(String prefix) {
        TrieNode node = root;
        for (char c : prefix.toCharArray()) {
            int idx = c - 'a';
            if (node.children[idx] == null) return false;
            node = node.children[idx];
        }
        return true;
    }
}
________________________________________________________



Problem Statement :
Implement Trie class and complete insert(), search() and isPrefix() function for the following queries :

Type 1 : (1, word), calls insert(word) function and insert word in the Trie
Type 2 : (2, word), calls search(word) function and check whether word exists in Trie or not.
Type 3 : (3, word), calls isPrefix(word) function and check whether word exists as a prefix of any string in Trie or not.




Approach :
Define TrieNode class with:
Array of 26 children (for lowercase 'a' to 'z').
Boolean isEndOfWord to mark end of a word.

Initialize root node in Trie constructor.

Insert Operation:
Traverse each character of the word.
If child node doesn't exist, create it.
Move to the next node.
After loop, mark last node as end of word.

Search Operation:
Traverse each character of the word.
If any child node is null, return false.
After loop, return true if node is end of word.

isPrefix Operation:
Traverse each character of the prefix.
If any child node is null, return false.
After loop, return true.




Complexity :
Time Complexity :  O(L)
Space Complexity : O(N Ã— L)