38. Count and Say
________________________________________________________

class Solution {
    public String countAndSay(int n) {
        if(n == 1) return "1"; 
        String prev = countAndSay(n - 1); 
        StringBuilder str = new StringBuilder();
        int i = 0;
        while(i < prev.length()) {
            char curr = prev.charAt(i);
            int j = 0;
            while(i+j < prev.length() && prev.charAt(i+j) == curr) j++;
            str.append(j);
            str.append(curr);
            i += j;
        }
        return str.toString();
    }
}
________________________________________________________



Problem Statement :
The count-and-say sequence is a sequence of digit strings defined by the recursive formula:

countAndSay(1) = "1"
countAndSay(n) is the run-length encoding of countAndSay(n - 1).
Run-length encoding (RLE) is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string "3322251" we replace "33" with "23", replace "222" with "32", replace "5" with "15" and replace "1" with "11". Thus the compressed string becomes "23321511".

Given a positive integer n, return the nth element of the count-and-say sequence.




Approach :
Base Case:
If n == 1, return "1" (first term of the sequence).

Recursive Call:
Get the result of countAndSay(n - 1) to build the current string based on the previous.

Run-Length Encoding:
Initialize a StringBuilder for the result.
Traverse the previous string.
For each group of same characters:
Count how many times it repeats.
Append the count followed by the character to the result.
Move the pointer ahead by the count.





Complexity :
Time Complexity : O(2ⁿ)
Space Complexity : O(2ⁿ)