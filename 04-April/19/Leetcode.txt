2563. Count the Number of Fair Pairs
_______________________________________________________

class Solution {
    public static int bs(int[] arr, int low, int high , int target , int flag){
        int index=-1;
        while(low<=high){
            int mid=low + (high-low)/2;
            if(flag==0){
                if(arr[mid]>=target){
                    index=mid;
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            else
            {
                if(arr[mid]<=target){
                    index=mid;
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }
        return index;
    }
    public long countFairPairs(int[] nums, int lower, int upper) {
        Arrays.sort(nums);
        long count=0;
        for(int i=0 ; i<nums.length ; i++){
            int target1=lower-nums[i];
            int target2=upper-nums[i];
            int ind1 = bs(nums,i+1,nums.length-1,target1,0);
            int ind2 = bs(nums,i+1,nums.length-1,target2,1);
            if(ind1!=-1 && ind2!=-1){
                count += ind2-ind1+1;
            }
        }
        return count;
    }
}
_______________________________________________________



Problem Statement :
Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.

A pair (i, j) is fair if:
0 <= i < j < n, and
lower <= nums[i] + nums[j] <= upper



Approach :
Sort the array to make binary search possible.

For each index i:
Compute valid js where: lower - nums[i] <= nums[j] <= upper - nums[i]

Use two binary searches on the subarray nums[i+1..n-1] to find:
First index ≥ lower - nums[i]
Last index ≤ upper - nums[i]

Count the number of valid js: ind2 - ind1 + 1 and add to the total.




Complexity :
Time Complexity : O(n log n)
Space Complexity : O(1)