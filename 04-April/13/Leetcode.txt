1922. Count Good Numbers
________________________________________________________

class Solution {
    long MOD=1000000007;
    public int countGoodNumbers(long n) {
        long odd = n/2;
        long even = (n+1)/2;
        return (int)( (pow(5,even) * pow(4,odd)) % MOD );
    }
    
    public long pow(long x, long n){
        if(n==0) 
            return 1;
        
        long temp = pow(x,n/2);
        
        if(n%2==0){
            return (temp*temp)%MOD;
        }
        else{
            return (x*temp*temp)%MOD;
        }
    }
}
________________________________________________________




Problem Statement :
A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).

For example, "2582" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However, "3245" is not good because 3 is at an even index but is not even.
Given an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.

A digit string is a string consisting of digits 0 through 9 that may contain leading zeros.






Approach :
Split Indices:
Count how many even indices and odd indices are there in a string of length n.
even = (n + 1) / 2
odd = n / 2

Calculate Ways:
Each even index can be filled with any of 5 even digits → 5^even
Each odd index can be filled with any of 4 prime digits → 4^odd

Combine Results:
Total good digit strings = 5^even * 4^odd

Modular Exponentiation:
Since n can be large, use fast exponentiation (binary exponentiation) to compute powers efficiently under modulo 10^9 + 7.

Return Result:
Return (5^even * 4^odd) % MOD





Complexity : 
Time Complexity : O(log n)
Space Complexity : O(log n)
 