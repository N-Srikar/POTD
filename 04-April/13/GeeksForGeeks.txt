Clone an Undirected Graph
________________________________________________________

import java.util.*;

class Node {
    public int val;
    public List<Node> neighbors;

    public Node() {
        val = 0;
        neighbors = new ArrayList<>();
    }

    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<>();
    }

    public Node(int _val, List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}

class Solution {
    private Map<Node, Node> map = new HashMap<>();

    public Node cloneGraph(Node node) {
        if (node == null) return null;

        // If the node is already cloned
        if (map.containsKey(node)) {
            return map.get(node);
        }

        // Clone the current node
        Node clone = new Node(node.val);
        map.put(node, clone);

        // Clone neighbors
        for (Node neighbor : node.neighbors) {
            clone.neighbors.add(cloneGraph(neighbor));
        }

        return clone;
    }
}
_________________________________________________________





Problem Statement :
Given a connected undirected graph represented by adjacency list, adjList[][] with n nodes, having a distinct label from 0 to n-1, where each adj[i] represents the list of vertices connected to vertex i.

Create a clone of the graph, where each node in the graph contains an integer val and an array (neighbors) of nodes, containing nodes that are adjacent to the current node.

class Node {
    val: integer
    neighbors: List[Node]
}
Your task is to complete the function cloneGraph( ) which takes a starting node of the graph as input and returns the copy of the given node as a reference to the cloned graph.

Note: If you return a correct copy of the given graph, then the driver code will print true; and if an incorrect copy is generated or when you return the original node, the driver code will print false.






Approach :
To clone an undirected graph, we need to:
1. Traverse the entire graph using DFS or BFS starting from the given node.
2. Use a hash map to store the mapping between original nodes and their clones.
3. For every node:
	If it's not yet cloned, create a clone and store the mapping.
	Recursively or iteratively visit its neighbors and add the cloned neighbors to the clone's neighbors list.




Complexity : 
Time Complexity: O(N + E)
Space Complexity: O(N)