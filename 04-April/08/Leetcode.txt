3396. Minimum Number of Operations to Make Elements in Array Distinct
_______________________________________________________

import java.util.*;

class Solution {
    public int minimumOperations(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = nums.length - 1; i >= 0; --i) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
            if (map.get(nums[i]) > 1) {
                return (i + 3) / 3;  
            }
        }
        return 0;
    }
}

_______________________________________________________





Problem Statement :
You are given an integer array nums. You need to ensure that the elements in the array are distinct. To achieve this, you can perform the following operation any number of times:
Remove 3 elements from the beginning of the array. If the array has fewer than 3 elements, remove all remaining elements.
Note that an empty array is considered to have distinct elements. Return the minimum number of operations needed to make the elements in the array distinct.




Approach :
Traverse the array from the end to the beginning (since removing from the front means we want to preserve distinct values at the back).
Use a HashMap to track frequency.
If a duplicate is detected, return ceil((i + 1) / 3) â€” i.e., the number of operations to remove the first i+1 elements.




Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)