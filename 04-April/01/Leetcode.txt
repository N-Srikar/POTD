2140. Solving Questions With Brainpower
________________________________________________________

class Solution {
    long dp[];
    public long mostPoints(int[][] questions) {
        dp = new long[questions.length];
        return dfs(questions, 0);
    }
    public long dfs(int[][] Q, int i) {
        if (i >= Q.length) return 0;
        if (dp[i] != 0) return dp[i];
        int points = Q[i][0], jump = Q[i][1];
        long take = points + dfs(Q, i + jump + 1);
        long nottake = dfs(Q, i + 1);
        return dp[i] = Math.max(take, nottake );
    }
}
_________________________________________________________

Problem Statement :
You are given a 0-indexed 2D integer array questions where questions[i] = [pointsi, brainpoweri].

The array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip each question. Solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. If you skip question i, you get to make the decision on the next question.

Return the maximum points you can earn for the exam.



Approach :
This is a typical dynamic programming problem.
For each index i we have 2 options:

Take pointsi and jump the next brainpoweri indexes
Skip the current index(do not collect pointsi) and move to the next index
We need to find the maximum points we can collect given the above mentioned constraints

Note: dp[i] denotes the max points that can be collected for the subarray: questions[i... questions.size() - 1]. So we only need to compute it once for each i


Complexity :
Time Complexity : O(n)
Space Complexity : O(n)