Is Binary Tree Heap
_______________________________________________________

class Solution {

    int countNodes(Node root) {
        if (root == null) {
            return 0;
        }
        return 1 + countNodes(root.left) + countNodes(root.right);
    }

    boolean isComplete(Node root, int index, int nodeCount) {
        if (root == null) {
            return true;
        }
        if (index >= nodeCount) {
            return false;
        }
        return isComplete(root.left, 2 * index + 1, nodeCount) &&
               isComplete(root.right, 2 * index + 2, nodeCount);
    }

    boolean isMaxHeap(Node root) {
        if (root == null) {
            return true;
        }
        if (root.left != null && root.data < root.left.data) {
            return false;
        }
        if (root.right != null && root.data < root.right.data) {
            return false;
        }
        return isMaxHeap(root.left) && isMaxHeap(root.right);
    }

    boolean isHeap(Node tree) {
        int nodeCount = countNodes(tree);
        return isComplete(tree, 0, nodeCount) && isMaxHeap(tree);
    }
}

_______________________________________________________


Problem Statement :
You are given a binary tree, and the task is to determine whether it satisfies the properties of a max-heap.

A binary tree is considered a max-heap if it satisfies the following conditions:
Completeness: Every level of the tree, except possibly the last, is completely filled, and all nodes are as far left as possible.

Max-Heap Property: The value of each node is greater than or equal to the values of its children.



Approach :
Count the total number of nodes in the binary tree to check if the tree is complete.

Check if the tree is complete using level-order traversal. Ensure that every level, except possibly the last, is fully filled, and the nodes at the last level are filled from left to right.

Check the max-heap property by verifying that each node's value is greater than or equal to its children's values.

Combine both checks: If both completeness and max-heap property are satisfied, the tree is a max-heap.


Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)