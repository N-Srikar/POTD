2444. Count Subarrays With Fixed Bounds
________________________________________________________

class Solution {
    public long countSubarrays(int[] A, int minK, int maxK) {
        long res = 0, jbad = -1, jmin = -1, jmax = -1, n = A.length;
        for (int i = 0; i < n; ++i) {
            if (A[i] < minK || A[i] > maxK) jbad = i;
            if (A[i] == minK) jmin = i;
            if (A[i] == maxK) jmax = i;
            res += Math.max(0L, Math.min(jmin, jmax) - jbad);
        }
        return res;
    }

}
________________________________________________________



Problem Statement :
You are given an integer array nums and two integers minK and maxK.

A fixed-bound subarray of nums is a subarray that satisfies the following conditions:
The minimum value in the subarray is equal to minK.
The maximum value in the subarray is equal to maxK.
Return the number of fixed-bound subarrays.

A subarray is a contiguous part of an array.




Approach :
We maintain a maximum sliding window
with alll elements in range [minK, maxK],
For all A[i] as rightmost element of the subarray,
we find the three indices j, where:
jbad is index of last seen A[jbad] < minK || A[jbad] > maxK
jmin is index of last seen A[jmin] = mink
jmax is index of last seen A[jmax] = maxk

Itearte the A[i],
if A[i] < minK || A[i] > maxK, update jbad = i.
if A[i] == minK, update jmin = i.
if A[i] == maxK, update jmax = i.

In the end of each iteration,
the subarray ends at A[i]
the starting element of the subarray,
can be choosen in interval [jbad + 1, min(jmin, jmax)]
There are min(jmin, jmax) - jbad choices,
so we update res += max(0, min(jmin, jmax) - jbad).




Complexity : 
Time Complexity : O(n)
Space Complexity : O(1)