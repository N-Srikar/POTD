Find the number of islands
________________________________________________________

class Solution {
    public int countIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        boolean[][] visited = new boolean[n][m];
        int count = 0;

        // 8 possible directions (horizontal, vertical, diagonal)
        int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};
        int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 'L' && !visited[i][j]) {
                    dfs(i, j, grid, visited, dx, dy, n, m);
                    count++;
                }
            }
        }

        return count;
    }

    private void dfs(int x, int y, char[][] grid, boolean[][] visited, int[] dx, int[] dy, int n, int m) {
        visited[x][y] = true;

        for (int dir = 0; dir < 8; dir++) {
            int newX = x + dx[dir];
            int newY = y + dy[dir];

            if (newX >= 0 && newY >= 0 && newX < n && newY < m
                    && grid[newX][newY] == 'L' && !visited[newX][newY]) {
                dfs(newX, newY, grid, visited, dx, dy, n, m);
            }
        }
    }
}
______________________________________________________





Problem Statement :
Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of 'W's (Water) and 'L's (Land). Find the number of islands.

Note: An island is either surrounded by water or the boundary of a grid and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.





Approach :
Traverse each cell in the grid.
When an unvisited land cell 'L' is found:
Increase the island count.
Use DFS to mark all connected land cells as visited.
Use a visited[][] matrix to ensure we don't visit the same land multiple times.
We check all 8 directions using direction vectors.



Complexity : 
Time Complexity : O(n * m) 
Space Complexity : O(n * m)