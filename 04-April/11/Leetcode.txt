2843. Count Symmetric Integers
_______________________________________________________

class Solution {
    public int countSymmetricIntegers(int low, int high) {
        int count = 0;

        for (int num = low; num <= high; num++) {
            String str = Integer.toString(num);
            int len = str.length();

            if (len % 2 != 0) continue;

            int half = len / 2;
            int leftSum = 0;
            int rightSum = 0;

            for (int i=0 ; i<half ; i++) {
                leftSum += str.charAt(i) - '0';
            }

            for (int i=half ; i<len ; i++) {
                rightSum += str.charAt(i) - '0';
            }

            if (leftSum == rightSum) {
                count++;
            }
        }

        return count; 
    }
}
_______________________________________________________



Problem Statement :
You are given two positive integers low and high.

An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.

Return the number of symmetric integers in the range [low, high].




Approach :
Loop from low to high
Skip number if it has odd digits
(“Troublesome… not symmetric.”)
Split the string in half
Sum left & right parts
If both are equal , Count it!



Complexity : 
Time Complexity : O(n * d)
Space Complexity : O(1)