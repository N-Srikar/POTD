2176. Count Equal and Divisible Pairs in an Array
_______________________________________________________

class Solution {
    public int countPairs(int[] nums, int k) {
        int index=0;
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]==nums[j]){
                    if(i*j%k==0){
                         index++;
                    }
                    
                }
            }
        }
        return index;
        
    }
}

_______________________________________________________



Problem Statement :
Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) where 0 <= i < j < n, such that nums[i] == nums[j] and (i * j) is divisible by k.



Approach :
1 . Nested Loop Structure:
The outer loop runs from i = 0 to i = nums.length - 1.
The inner loop runs from j = i + 1 to j = nums.length - 1.
This ensures all possible pairs (i, j) where i < j are checked.

2 . Condition Checks:
For each pair (i, j), it first checks if the values at these indices are equal (nums[i] == nums[j]).
If they are equal, it then checks if the product of the indices is divisible by k ((i * j) % k == 0).

3 . Counting Valid Pairs:
If both conditions are satisfied, the counter index is incremented.




Complexity :
Time Complexity : O(n^2)
Space Complexity : O(1)