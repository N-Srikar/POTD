Minimum Weight Cycle
________________________________________________________

class Solution {
    static class Pair {
        int node, weight;
        Pair(int n, int w) {
            node = n;
            weight = w;
        }
    }

    public int findMinCycle(int V, int[][] edges) {
        List<List<Pair>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());

        // Build adjacency list
        for (int[] e : edges) {
            int u = e[0], v = e[1], w = e[2];
            adj.get(u).add(new Pair(v, w));
            adj.get(v).add(new Pair(u, w));
        }

        int minCycle = Integer.MAX_VALUE;

        // Try removing each edge
        for (int[] e : edges) {
            int u = e[0], v = e[1], w = e[2];

            // Temporarily remove edge (u,v)
            removeEdge(adj, u, v, w);

            // Dijkstra from u to v
            int[] dist = dijkstra(u, V, adj);
            if (dist[v] != Integer.MAX_VALUE) {
                minCycle = Math.min(minCycle, dist[v] + w);
            }

            // Add the edge back
            adj.get(u).add(new Pair(v, w));
            adj.get(v).add(new Pair(u, w));
        }

        return minCycle == Integer.MAX_VALUE ? -1 : minCycle;
    }

    private int[] dijkstra(int src, int V, List<List<Pair>> adj) {
        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.weight));

        dist[src] = 0;
        pq.add(new Pair(src, 0));

        while (!pq.isEmpty()) {
            Pair cur = pq.poll();
            int node = cur.node, d = cur.weight;

            for (Pair neighbor : adj.get(node)) {
                int next = neighbor.node, wt = neighbor.weight;
                if (dist[next] > d + wt) {
                    dist[next] = d + wt;
                    pq.add(new Pair(next, dist[next]));
                }
            }
        }

        return dist;
    }

    private void removeEdge(List<List<Pair>> adj, int u, int v, int w) {
        adj.get(u).removeIf(p -> p.node == v && p.weight == w);
        adj.get(v).removeIf(p -> p.node == u && p.weight == w);
    }
}

________________________________________________________



Problem Statement :
Given an undirected, weighted graph with V vertices numbered from 0 to V-1 and E edges, represented by a 2d array edges[][], where edges[i] = [u, v, w] represents the edge between the nodes u and v having w edge weight.
Your task is to find the minimum weight cycle in this graph.





Approach :
Temporarily remove the edge (u, v).
Run Dijkstra's algorithm from u to find the shortest path to v.
If a path exists, the cycle weight is shortest_path(u, v) + w.
Keep track of the minimum cycle weight.




Complexity :
Time Complexity : O(E * (V + E) log V)
Space Complexity : O(V + E)