3375. Minimum Operations to Make Array Values Equal to K
________________________________________________________

class Solution {
    public int minOperations(int[] nums, int k) {
        Arrays.sort(nums);
        int countK = 0, greater = 0;
        int lastGreater = -1;
        boolean smallerExist = false;

        for (int num : nums) {
            if (num == k) {
                countK++;
            } 
            else if (num > k) {
                if (lastGreater != num) {
                    lastGreater = num;
                    greater++;
                }
            } 
            else {
                smallerExist = true;
            }
        }

        if (countK == nums.length) return 0;
        if (smallerExist) return -1;
        return greater;
    }
}
_______________________________________________________



Problem Statement :
You are given an integer array nums and an integer k.
An integer h is called valid if all values in the array that are strictly greater than h are identical.
For example, if nums = [10, 8, 10, 8], a valid integer is h = 9 because all nums[i] > 9 are equal to 10, but 5 is not a valid integer.
You are allowed to perform the following operation on nums:
Select an integer h that is valid for the current values in nums.
For each index i where nums[i] > h, set nums[i] to h.
Return the minimum number of operations required to make every element in nums equal to k. If it is impossible to make all elements equal to k, return -1.




Approach :
Sort the array to process elements in increasing order.

Count how many elements are:
Exactly equal to k (countK)
Distinctly greater than k (greater)
Less than k (if any, immediately return -1)

If all elements are already equal to k, return 0.
If any element is less than k, it's not possible to transform it to k â†’ return -1.

Otherwise, return the number of distinct values greater than k, since each such distinct value might need a separate operation to reduce it to k.





Complexity :
Time Complexity : O(nlogn)
Space Complexity : O(1)
