Sort a linked list of 0s, 1s and 2s
________________________________________________________

class Solution {
    static Node segregate(Node head) {
        Node zeroD = new Node(0);
        Node oneD = new Node(0);
        Node twoD = new Node(0);

        Node zero = zeroD, one = oneD, two = twoD;

        Node curr = head;
        while (curr != null) {
            if (curr.data == 0) {
                zero.next = curr;
                zero = zero.next;
            } 
            else if (curr.data == 1) {
                one.next = curr;
                one = one.next;
            } 
            else {
                two.next = curr;
                two = two.next;
            }
            curr = curr.next;
        }

        zero.next = (oneD.next != null) ? oneD.next : twoD.next;
        one.next = twoD.next;
        two.next = null;

        return zeroD.next;
    }
}
________________________________________________________


Problem Statement : 
Given the head of a linked list where nodes can contain values 0s, 1s, and 2s only. Your task is to rearrange the list so that all 0s appear at the beginning, followed by all 1s, and all 2s are placed at the end.




Approach : 
Create three dummy nodes: zeroD, oneD, twoD for 0s, 1s, and 2s.

Maintain current pointers zero, one, two to build three sublists.

Traverse the original list:
Attach each node to its respective list (0 → zero, 1 → one, 2 → two).

Connect the three lists:
zero.next = oneD.next (if 1s exist) or twoD.next
one.next = twoD.next
two.next = null

Return zeroD.next as new head.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(1)