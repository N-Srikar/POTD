Topological sort
_______________________________________________________

class Solution {
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        ArrayList<Integer> result = new ArrayList<>();
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        
        // build adjacency list
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
        }
        
        // calculate in-degree
        int[] indegree = new int[V];
        for (int u = 0; u < V; u++) {
            for (int v : adj.get(u)) {
                indegree[v]++;
            }
        }
        
        // queue for nodes with in-degree 0
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.add(i);
            }
        }
        
        // BFS process
        while (!q.isEmpty()) {
            int u = q.poll();
            result.add(u);
            for (int v : adj.get(u)) {
                indegree[v]--;
                if (indegree[v] == 0) {
                    q.add(v);
                }
            }
        }
        
        return result;
    }
}

_______________________________________________________




Problem Statement :
Given a Directed Acyclic Graph (DAG) of V (0 to V-1) vertices and E edges represented as a 2D list of edges[][], where each entry edges[i] = [u, v] denotes an directed edge u -> v. Return topological sort for the given graph.

Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u -> v, vertex u comes before v in the ordering.
Note: As there are multiple Topological orders possible, you may return any of them. If your returned Topological sort is correct then the output will be true else false.




Approach :
Build the adjacency list from the given edges.
Calculate in-degree for each node.
Add all nodes with in-degree 0 to a queue.
While the queue is not empty:
->Pop a node and add it to the topological order.
->Decrease the in-degree of its neighbors.
->If a neighborâ€™s in-degree becomes 0, add it to the queue.
Return the topological order.



Complexity :
Time Complexity : O(v + e)
Space Complexity : O(v + e)