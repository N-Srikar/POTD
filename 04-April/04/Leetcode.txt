1123. Lowest Common Ancestor of Deepest Leaves
____________________________________________________________

class Solution {
    TreeNode res;
    int maxDepth = -1;

    public TreeNode lcaDeepestLeaves(TreeNode root) {
        dfs(root, 0);
        return res;
    }

    private int dfs(TreeNode node, int depth) {
        if (node == null) {
            maxDepth = Math.max(maxDepth, depth);
            return depth;
        }

        int left = dfs(node.left, depth + 1);
        int right = dfs(node.right, depth + 1);
        if (left == right && left == maxDepth)
            res = node;
        return Math.max(left, right);
    }
}
_____________________________________________________________


Problem Statement :
Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.

Recall that:
The node of a binary tree is a leaf if and only if it has no children
The depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.
The lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.



Approach :
We use a recursive Depth-First Search (DFS) approach. The helper function returns a pair:
The depth of the subtree, and
The LCA of the deepest leaves in that subtree.

For each node:
Recursively get the depth and LCA from its left and right children.
If both children have the same depth, the current node is the LCA.
Otherwise, the deeper child subtree contains the LCA.


Complexity : 
Time Complexity : O(n)
Space Complexity : O(h)