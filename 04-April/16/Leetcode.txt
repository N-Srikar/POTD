2537. Count the Number of Good Subarrays
_________________________________________________________


class Solution {
    public long countGood(int[] nums, int k) {
        Map<Integer, Integer> freq = new HashMap<>();
        int n = nums.length;
        int left = 0;
        long ans = 0;
        long pairs = 0;

        for (int right = 0; right < n; right++) {
            int count = freq.getOrDefault(nums[right], 0);
            pairs += count;
            freq.put(nums[right], count + 1);

            while (pairs >= k) {
                ans += (n - right); // All subarrays from left to right, right+1, ..., n-1 are good
                int leftCount = freq.get(nums[left]);
                pairs -= (leftCount - 1); // removing nums[left] reduces pairs
                freq.put(nums[left], leftCount - 1);
                left++;
            }
        }

        return ans;
    }
}

_________________________________________________________





Problem Statement :
Given an integer array nums and an integer k, return the number of good subarrays of nums.
A subarray arr is good if there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].
A subarray is a contiguous non-empty sequence of elements within an array.



Approach :
1. Use a Map<Integer, Integer> or int[] to store frequencies.

2. Use a sliding window from left to right.

3. Maintain a pairs count:
When a new number is added, if the count of that number was x, then adding one more makes x additional pairs.
i.e., new pairs = freq[num] (before updating the frequency).

4. While pairs >= k, move left to try minimizing the window (since all windows [left, right] where left ≤ current left will also be valid).

5. Add (left + 1) to the answer because all subarrays from any index ≤ left to right are good.






Complexity :
Time Complexity : O(n)
Space Complexity : O(n)
