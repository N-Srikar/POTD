Insert Interval
_________________________________________________________

class Solution {
    public ArrayList<int[]> insertInterval(int[][] intervals, int[] newInterval) {
        ArrayList<int[]> res = new ArrayList<>();
        int i = 0, n = intervals.length;

        // Step 1: Add all before
        while (i < n && intervals[i][1] < newInterval[0]) {
            res.add(intervals[i]);
            i++;
        }

        // Step 2: Merge overlaps
        while (i < n && intervals[i][0] <= newInterval[1]) {
            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
            i++;
        }
        res.add(newInterval);

        // Step 3: Add remaining
        while (i < n) {
            res.add(intervals[i]);
            i++;
        }

        return res;
    }
}

_________________________________________________________




Problem Statement : 
Geek has an array of non-overlapping intervals intervals[][] where intervals[i] = [starti , endi] represent the start and the end of the ith event and intervals is sorted in ascending order by starti . He wants to add a new interval newInterval[] = [newStart, newEnd] where newStart and newEnd represent the start and end of this interval.
Help Geek to insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).





Approach : 
Add all intervals before newInterval
While intervals[i][1] < newInterval[0], add intervals[i] to result.

Merge overlapping intervals
While intervals[i][0] <= newInterval[1], update:
newInterval[0] = min(newInterval[0], intervals[i][0])
newInterval[1] = max(newInterval[1], intervals[i][1])
Add merged newInterval to result.

Add remaining intervals
Add all intervals after merging.





Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)