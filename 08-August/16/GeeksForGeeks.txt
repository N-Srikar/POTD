Form the Largest Number
________________________________________________________

import java.util.*;

class Solution {
    public String findLargest(int[] arr) {
        // Step 1: Convert int[] to String[]
        String[] nums = new String[arr.length];
        for (int i = 0; i < arr.length; i++) {
            nums[i] = String.valueOf(arr[i]);
        }
        
        // Step 2: Sort using custom comparator
        Arrays.sort(nums, (a, b) -> (b + a).compareTo(a + b));
        
        // Step 3: Handle edge case (all zeros)
        if (nums[0].equals("0")) return "0";
        
        // Step 4: Build result
        StringBuilder sb = new StringBuilder();
        for (String num : nums) {
            sb.append(num);
        }
        
        return sb.toString();
    }
}

________________________________________________________




Problem Statement : 
Given an array of integers arr[] representing non-negative integers, arrange them so that after concatenating all of them in order, it results in the largest possible number. Since the result may be very large, return it as a string.




Approach : 
Convert integers to strings → because concatenation order matters.

Sort with custom comparator:
For two numbers a and b, compare (a+b) and (b+a) as strings.
Pick order that gives the larger concatenation.
Edge case: If the largest number starts with "0", return "0".

Join strings → build final answer.





Complexity : 
Time Complexity : O(n log n * k)
Space Complexity : O(n)