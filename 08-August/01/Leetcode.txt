118. Pascal's Triangle
________________________________________________________

class Solution {
    public List<List<Integer>> generate(int n) {
        List<List<Integer>> res = new ArrayList<>();
        for(int i=0 ; i<n ; i++){
            List<Integer> row = new ArrayList<>();
            
            row.add(1);

            for(int j=1 ; j<i ; j++){
                row.add(res.get(i-1).get(j-1) + res.get(i-1).get(j));
            }

            if(i>0) row.add(1);

            res.add(row);
        }
        return res;
    }
}
________________________________________________________




Problem Statement : 
Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:





Approach :
Initialize an empty list res to store the triangle.

Iterate i from 0 to n-1:
Create a new list row for the current level.

First element is always 1 → row.add(1)

For each position j from 1 to i-1 (internal elements):
Add sum of two elements from the previous row:
res.get(i-1).get(j-1) + res.get(i-1).get(j)

If i > 0, add 1 at the end of the row.

Add the completed row to res.

Return res, which contains the first n rows of Pascal’s Triangle.







Complexity : O(n^2)
Time Complexity : O(n^2)