Shop in Candy Store
________________________________________________________

class Solution {
    public ArrayList<Integer> minMaxCandy(int[] arr, int k) {
        Arrays.sort(arr);
        int len = arr.length;
        
        int mincost = 0;
        int j=len-1;
        for(int i=0 ; i<len ; i++){
            if(i<=j){
                mincost += arr[i];
                j-=k;
            }
        }
        
        int maxcost = 0;
        j=0;
        for(int i=len-1; i>=0 ; i--){
            if(i>=j){
                maxcost += arr[i];
                j+=k;
            }
        }
        
        ArrayList<Integer> res = new ArrayList<>();
        res.add(mincost);
        res.add(maxcost);
        
        return res;
    }
}

________________________________________________________



Problem Statement : 
In a candy store, there are different types of candies available and prices[i] represent the price of  ith types of candies. You are now provided with an attractive offer.
For every candy you buy from the store, you can get up to k other different candies for free. Find the minimum and maximum amount of money needed to buy all the candies.
Note: In both cases, you must take the maximum number of free candies possible during each purchase.





Approach : 
1. Sort the array arr[] of candy prices in ascending order.
This is necessary to greedily pick the cheapest (for min cost) and most expensive (for max cost) candies first.

2. Calculate Minimum Cost:
Start from the beginning (cheapest candies).
For each candy you buy, skip k most expensive unbought candies (they are free).
Keep track using two pointers: i (buying index) and j (end index of available candies).

3. Calculate Maximum Cost:
Start from the end (most expensive candies).
For each candy you buy, skip k cheapest unbought candies (they are free).
Again, use two pointers: i (buying index) and j (start index of available candies).

4. Return [minCost, maxCost] as result.






Complexity :
Time Complexity : O(n)
Space Complexity : O(1)