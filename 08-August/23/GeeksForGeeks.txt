Allocate Minimum Pages
_________________________________________________________

class Solution {
    public int findPages(int[] arr, int k) {
        int n = arr.length;
        if (k > n) return -1;  // not enough books
        
        int low = 0, high = 0;
        for (int pages : arr) {
            low = Math.max(low, pages); // max book
            high += pages;              // total sum
        }
        
        int res = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (isPossible(arr, k, mid)) {
                res = mid;
                high = mid - 1; // try smaller maximum
            } else {
                low = mid + 1; // increase limit
            }
        }
        return res;
    }
    
    private boolean isPossible(int[] arr, int k, int maxPages) {
        int students = 1, pagesSum = 0;
        for (int pages : arr) {
            if (pagesSum + pages > maxPages) {
                students++;
                pagesSum = pages;
                if (students > k) return false;
            } else {
                pagesSum += pages;
            }
        }
        return true;
    }
}

_________________________________________________________




Problem Statement : 
Given an array arr[] of integers, where each element arr[i] represents the number of pages in the i-th book. You also have an integer k representing the number of students. The task is to allocate books to each student such that:
Each student receives atleast one book.
Each student is assigned a contiguous sequence of books.
No book is assigned to more than one student.

The objective is to minimize the maximum number of pages assigned to any student. In other words, out of all possible allocations, find the arrangement where the student who receives the most pages still has the smallest possible maximum.

Note: If it is not possible to allocate books to all students, return -1.




Approach : 
Feasibility check:
If k > n (more students than books) → return -1 (not possible).

Range for answer:
Lower bound = max(arr) (at least one student must take the largest book).
Upper bound = sum(arr) (if one student takes all books).

Binary search:
Mid = (low + high) / 2.
Check if it’s possible to allocate with max pages ≤ mid using a greedy method.

Greedy check (isPossible):
Iterate through arr, keep assigning books to current student until pages exceed mid.
If exceeded, allocate to next student.
If students needed > k → not possible.

Minimize:
If possible → move left (high = mid - 1).
Else → move right (low = mid + 1).






Complexity : 
Time Complexity : O(n * log(sum(arr)))
Space Complexity : O(1)