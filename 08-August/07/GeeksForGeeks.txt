Difference Check
_________________________________________________________

class Solution {
    public int minDifference(String[] arr) {
        Arrays.sort(arr); 
        int min = Integer.MAX_VALUE;

        for (int i = 0; i < arr.length - 1; i++) {
            int diff = getTimeDifferenceInSeconds(arr[i], arr[i + 1]);
            min = Math.min(min, diff);
        }

        int wrapDiff = 86400 - getTimeInSeconds(arr[arr.length - 1]) + getTimeInSeconds(arr[0]);
        min = Math.min(min, wrapDiff);

        return min;
    }

    private int getTimeInSeconds(String time) {
        int h = Integer.parseInt(time.substring(0, 2));
        int m = Integer.parseInt(time.substring(3, 5));
        int s = Integer.parseInt(time.substring(6, 8));
        return h * 3600 + m * 60 + s;
    }

    private int getTimeDifferenceInSeconds(String t1, String t2) {
        return getTimeInSeconds(t2) - getTimeInSeconds(t1);
    }
}

_________________________________________________________




Problem Statement :
Given an array arr[] of time strings in 24-hour clock format "HH:MM:SS", return the minimum difference in seconds between any two time strings in the arr[].
The clock wraps around at midnight, so the time difference between "23:59:59" and "00:00:00" is 1 second.





Approach : 
Sort the input array arr[] of time strings in "HH:MM:SS" format.
Lexicographical sort works because of fixed-length, zero-padded format.

Iterate through adjacent time strings:
Convert each time to total seconds since midnight.
Calculate the difference between each consecutive pair.
Keep track of the minimum difference.

Handle wrap-around at midnight:
Difference between last and first time in the sorted list:
wrapDiff = 86400 - last + first

Where 86400 is the number of seconds in a day.
Return the minimum difference found.





Complexity : 
Time Complexity: O(n log n)
Space Complexity: O(1)