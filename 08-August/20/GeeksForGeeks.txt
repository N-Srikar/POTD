Search in fully rotated sorted 2D matrix
________________________________________________________

class Solution {
    public boolean searchMatrix(int[][] mat, int x) {
        int n = mat.length;
        int m = mat[0].length;
        int low = 0, high = n * m - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Map 1D index to 2D
            int midRow = mid / m;
            int midCol = mid % m;
            int midVal = mat[midRow][midCol];

            // Map low and high too
            int lowRow = low / m, lowCol = low % m;
            int lowVal = mat[lowRow][lowCol];

            int highRow = high / m, highCol = high % m;
            int highVal = mat[highRow][highCol];

            if (midVal == x) return true;

            // Determine which half is sorted
            if (lowVal <= midVal) {  // Left half is sorted
                if (lowVal <= x && x < midVal) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {  // Right half is sorted
                if (midVal < x && x <= highVal) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }

        return false;
    }
}

________________________________________________________





Problem Statement :
You are given a 2D matrix mat[][] of size n x m that was initially filled in the following manner:
Each row is sorted in increasing order from left to right.
The first element of every row is greater than the last element of the previous row.

This implies that if the matrix is flattened row-wise, it forms a strictly sorted 1D array.
Later, this sorted 1D array was rotated at some unknown pivot. The rotated array was then written back into the matrix row-wise to form the current matrix.

Given such a matrix mat[][] and an integer x, determine whether x exists in the matrix.






Approach :
Binary search on index range [0, total - 1].

Convert 1D index â†’ 2D index:
row = index / m
col = index % m

Get value at that 2D position: mat[row][col]

Use normal binary search with rotation logic like in a rotated 1D array.






Complexity : 
Time Complexity : O(log(n * m))
Space Complexity : O(1)