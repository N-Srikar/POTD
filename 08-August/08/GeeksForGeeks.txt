Longest Prefix Suffix
________________________________________________________

class Solution {
    int getLPSLength(String s) {
        int n = s.length();
        int[] lps = new int[n];
        int len = 0, i = 1;
        while (i < n) {
            if (s.charAt(i) == s.charAt(len)) {
                lps[i++] = ++len;
            } else {
                if (len != 0) len = lps[len - 1];
                else lps[i++] = 0;
            }
        }
        return lps[n - 1];
    }
}

________________________________________________________



Problem Statement :
Given a string s, of lowercase english alphabets, find the length of the longest proper prefix which is also a suffix.
Note: Prefix and suffix can be overlapping but they should not be equal to the entire string.





Approach :
Initialize lps array to store longest prefix-suffix lengths.

Use two pointers: i for current char, len for length of current match.
If characters match, increment len and assign to lps[i].
If mismatch and len > 0, update len to previous LPS value; else set lps[i] to 0.

Answer is lps[n-1].





Complexity : 
Time Complexity : O(n)
Space Complexity : O(n)