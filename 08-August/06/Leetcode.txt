3479. Fruits Into Baskets III
________________________________________________________

class Solution {
    public int numOfUnplacedFruits(int[] fruits, int[] baskets) {
        int n = baskets.length;
        int N = 1;

        while(N <= n) N <<= 1;

        int[] segTree = new int[N << 1];
        
        for (int i = 0; i < n; i++)
        segTree[N + i] = baskets[i];

        for (int i = N - 1; i > 0; i--) 
        segTree[i] = Math.max(segTree[2 * i], segTree[2 * i + 1]);
        
        int count = 0;

        for (int i = 0; i < n; ++i) {
            int x = fruits[i];
            int index = 1; 
            if (segTree[index] < x) {
                count++;
                continue;
            }
            while (index < N) {
                if (segTree[index * 2] >= x) 
                index *= 2;
                else
                index = index * 2 + 1;
            }
            segTree[index] = -1;
            while (index > 1) {
                index >>= 1;
                segTree[index] = Math.max(segTree[2 * index], segTree[2 * index + 1]);
            }
        }
        
        return count;     
    }
}
________________________________________________________




Problem Statement :
You are given two arrays of integers, fruits and baskets, each of length n, where fruits[i] represents the quantity of the ith type of fruit, and baskets[j] represents the capacity of the jth basket.

From left to right, place the fruits according to these rules:

Each fruit type must be placed in the leftmost available basket with a capacity greater than or equal to the quantity of that fruit type.
Each basket can hold only one type of fruit.
If a fruit type cannot be placed in any basket, it remains unplaced.
Return the number of fruit types that remain unplaced after all possible allocations are made.





Approach :
Build a segment tree from the baskets[] array where:
Each leaf node represents a single basket
Each internal node stores the max() of its children

For each fruit:
If the tree's root value is less than the fruit size â†’ skip (no valid basket)
Else, traverse the tree to find the leftmost basket that can fit the fruit
Once found, mark the basket as used (e.g., set to -1) and update all parent nodes





Complexity :
Time Complexity : O(n log n)
Space Complexity : O(n)