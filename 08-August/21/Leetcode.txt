1504. Count Submatrices With All Ones
_____________________________________________________

class Solution {
    public int numSubmat(int[][] mat) {
        int r = mat.length, c = mat[0].length;
        int[] h = new int[c];
        int ans = 0;

        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                h[j] = (mat[i][j] == 0) ? 0 : h[j] + 1;
            }
            ans += count(h);
        }
        return ans;
    }

    private int count(int[] h) {
        int n = h.length, res = 0;
        int[] sum = new int[n];
        Deque<Integer> st = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && h[st.peek()] >= h[i]) st.pop();
            if (!st.isEmpty()) {
                int p = st.peek();
                sum[i] = sum[p] + h[i] * (i - p);
            } else {
                sum[i] = h[i] * (i + 1);
            }
            st.push(i);
            res += sum[i];
        }
        return res;
    }
}
_____________________________________________________




Problem Statement : 
Given an m x n binary matrix mat, return the number of submatrices that have all ones.




Approach : 
Build Heights (Histogram Representation):
Traverse the matrix row by row.

For each row, update an array h where h[j] represents the number of consecutive 1s ending at column j up to the current row.
If mat[i][j] == 0, reset h[j] = 0; 
otherwise, increment it.

Count Submatrices per Row:
For each row (after updating h), count how many submatrices end at this row.
This reduces to counting rectangles in a histogram defined by h.

Monotonic Stack Optimization:
Use a stack to keep indices of increasing heights.

For each column i:
A). Pop from the stack until it is strictly increasing.
B). If the stack is not empty, calculate submatrices using the previous smaller elementâ€™s index.
C). Otherwise, calculate directly with h[i] * (i + 1).

Maintain an auxiliary array sum[i] that stores the total number of submatrices ending exactly at column i.
Accumulate sum[i] into the result.

Final Result:
Repeat the process for all rows and add the counts.
The sum gives the total number of submatrices with all ones.





Complexity :
Time Complexity : O(r*c)
Space Complexity : O(n)